<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D 先生的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-17T14:59:23.398Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Edsion Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BurpSuite——Intruder四种模式详解</title>
    <link href="http://yoursite.com/2020/06/17/BurpSuite%E2%80%94%E2%80%94Intruder%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/06/17/BurpSuite%E2%80%94%E2%80%94Intruder%E5%9B%9B%E7%A7%8D%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-06-17T14:57:52.000Z</published>
    <updated>2020-06-17T14:59:23.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Sniper（狙击手）"><a href="#一、Sniper（狙击手）" class="headerlink" title="一、Sniper（狙击手）"></a>一、Sniper（狙击手）</h2><p>Sniper模式只能使用一组 payload 集合，一次只使用一个 payload 位置；假如标记了两个位置 “A” 和 “B” ，payload 集合内有“1”和“2”两个值，那么它攻击会形成以下组合：</p><table><thead><tr><th align="center">攻击序列</th><th align="center">位置A</th><th align="center">位置B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">不替换</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">不替换</td></tr><tr><td align="center">3</td><td align="center">不替换</td><td align="center">1</td></tr><tr><td align="center">4</td><td align="center">不替换</td><td align="center">2</td></tr></tbody></table><p>适用场景：竞争条件测试（选择Null payloads），密码、验证码暴力破解，重放攻击等场景</p><h2 id="二、Battering-ram（攻城锤）"><a href="#二、Battering-ram（攻城锤）" class="headerlink" title="二、Battering ram（攻城锤）"></a>二、Battering ram（攻城锤）</h2><p>同样只能使用一组 payload 集合，不同的地方在于每次攻击都是替换所有payload标记位置；如果添加了两个参数的话，就一起进行爆破，两个参数爆破时候的值肯定就是一样的了：</p><table><thead><tr><th align="center">攻击序列</th><th align="center">位置A</th><th align="center">位置B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">2</td></tr></tbody></table><p>适用场景：暴力破解</p><h2 id="三、Pitchfork（草叉）"><a href="#三、Pitchfork（草叉）" class="headerlink" title="三、Pitchfork（草叉）"></a>三、Pitchfork（草叉）</h2><p>草叉模式允许使用多组payload组合，如果只添加了一个参数的话，会报错；在每个标记位置上遍历各自对应的payload组合，假设有两个位置“A”和“B”，payload组合1的值为“1”和“2”，payload组合2的值为“3”和“4”，那么它攻击会形成以下组合：</p><table><thead><tr><th align="center">攻击序列</th><th align="center">位置A</th><th align="center">位置B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">3</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">4</td></tr></tbody></table><p>注：如果两个payload行数不一致的话，取最小值进行测试。所以爆破的次数取两个中最小的为准。</p><p>适用场景：恶意注册、撞裤</p><h2 id="四、Cluster-bomb（集束炸弹）"><a href="#四、Cluster-bomb（集束炸弹）" class="headerlink" title="四、Cluster bomb（集束炸弹）"></a>四、Cluster bomb（集束炸弹）</h2><p>集束炸弹也允许使用多组payload组合，跟草叉模式不同的地方在于，集束炸弹模式会对payload组进行笛卡尔积，那么它攻击会形成以下组合：</p><table><thead><tr><th align="center">攻击序列</th><th align="center">位置A</th><th align="center">位置B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">3</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">1</td><td align="center">2</td><td align="center">3</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">4</td></tr></tbody></table><p>适用场景：账号、密码暴力破解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Sniper（狙击手）&quot;&gt;&lt;a href=&quot;#一、Sniper（狙击手）&quot; class=&quot;headerlink&quot; title=&quot;一、Sniper（狙击手）&quot;&gt;&lt;/a&gt;一、Sniper（狙击手）&lt;/h2&gt;&lt;p&gt;Sniper模式只能使用一组 payload 集合，
      
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="BurpSuite" scheme="http://yoursite.com/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向系列之谷歌翻译</title>
    <link href="http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B9%8B%E8%B0%B7%E6%AD%8C%E7%BF%BB%E8%AF%91/</id>
    <published>2020-06-17T10:16:58.000Z</published>
    <updated>2020-06-17T10:25:36.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、逆向谷歌翻译"><a href="#一、逆向谷歌翻译" class="headerlink" title="一、逆向谷歌翻译"></a>一、逆向谷歌翻译</h3><h4 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h4><ul><li>首次分析</li></ul><p>首先找到谷歌翻译的Ajax请求接口</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529141646.png" alt=""></p><p>以get方式发送的Ajax请求，多次尝试，发现请求参数中，<code>tk</code>和<code>q</code>，是不断变化的，其中<code>q</code>是待翻译的内容，<code>tk</code>是根据<code>q</code>进行js加密算法生成的，所以我们要分析<code>tk</code>的产生。</p><ul><li>通过断点逆向<code>tk</code>的加密算法</li></ul><p>加密算法应该在translate_m_zh-CN.js文件里</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529142909.png" alt=""></p><p>打个断点，请求翻译接口的URL时停止，发现在send(a)中停止了，根据Call Stack的调用关系，一步步分析，最上面的就是send函数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529143414.png" alt=""></p><p>依次往下点击每一个调用的函数，当到了QE函数的时候，发现了<code>tk</code>参数来自b，b又明显来自c</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529143742.png" alt=""></p><p>于是我们顺藤摸瓜，发现c是由PE(d)产生的，PE又是来自pu(a)函数，我们跳转到pu函数的位置，似乎已经有了答案</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144207.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144416.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529144520.png" alt=""></p><ul><li>分析生成<code>tk</code>的JS代码</li></ul><p>如下是我们刚获取的JS代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  , nu = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; b.length - <span class="number">2</span>; c += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = b.charAt(c + <span class="number">2</span>);</span><br><span class="line">        d = <span class="string">"a"</span> &lt;= d ? d.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(d);</span><br><span class="line">        d = <span class="string">"+"</span> == b.charAt(c + <span class="number">1</span>) ? a &gt;&gt;&gt; d : a &lt;&lt; d;</span><br><span class="line">        a = <span class="string">"+"</span> == b.charAt(c) ? a + d &amp; <span class="number">4294967295</span> : a ^ d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">  , ou = <span class="literal">null</span></span><br><span class="line">  , pu = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== ou)</span><br><span class="line">        <span class="keyword">var</span> b = ou;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">84</span>));</span><br><span class="line">        <span class="keyword">var</span> c = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">75</span>));</span><br><span class="line">        b = [b(), b()];</span><br><span class="line">        b[<span class="number">1</span>] = c();</span><br><span class="line">        b = (ou = <span class="built_in">window</span>[b.join(c())] || <span class="string">""</span>) || <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">116</span>));</span><br><span class="line">    c = mu(<span class="built_in">String</span>.fromCharCode(<span class="number">107</span>));</span><br><span class="line">    d = [d(), d()];</span><br><span class="line">    d[<span class="number">1</span>] = c();</span><br><span class="line">    c = <span class="string">"&amp;"</span> + d.join(<span class="string">""</span>) + <span class="string">"="</span>;</span><br><span class="line">    d = b.split(<span class="string">"."</span>);</span><br><span class="line">    b = <span class="built_in">Number</span>(d[<span class="number">0</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = [], f = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.length; g++) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = a.charCodeAt(g);</span><br><span class="line">        <span class="number">128</span> &gt; h ? e[f++] = h : (<span class="number">2048</span> &gt; h ? e[f++] = h &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> == (h &amp; <span class="number">64512</span>) &amp;&amp; g + <span class="number">1</span> &lt; a.length &amp;&amp; <span class="number">56320</span> == (a.charCodeAt(g + <span class="number">1</span>) &amp; <span class="number">64512</span>) ? (h = <span class="number">65536</span> + ((h &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>) + (a.charCodeAt(++g) &amp; <span class="number">1023</span>),</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : e[f++] = h &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        e[f++] = h &amp; <span class="number">63</span> | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; e.length; f++)</span><br><span class="line">        a += e[f],</span><br><span class="line">        a = nu(a, <span class="string">"+-a^+6"</span>);</span><br><span class="line">    a = nu(a, <span class="string">"+-3^+b+-f"</span>);</span><br><span class="line">    a ^= <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="number">2147483647</span>) + <span class="number">2147483648</span>);</span><br><span class="line">    a %= <span class="number">1E6</span>;</span><br><span class="line">    <span class="keyword">return</span> c + (a.toString() + <span class="string">"."</span> + (a ^ b))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>发现做了很多不必要的操作、甚至多此一举，目的是用于混淆<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mu &#x3D; function(a) &#123;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        return a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还用了<code>.fromCharCode()</code>函数，把数字转换为字母，明显多此一举的操作。但是，通过分析，发现<code>tk</code>生成需要另一样东西，就是<code>tkk</code>这个参数，来源于网页源代码上，寻找一番，还是发现了，多次尝试，发现这个值是固定的</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529145556.png" alt=""></p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>说明：js文件做了精炼，把不必要的值去掉了，实行的效果是英译中，不同语言的翻译修改请求的参数即可</p><ul><li>Python脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tk</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'google_tk.js'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js = f.read()</span><br><span class="line">    j = execjs.compile(js)</span><br><span class="line">    tk = j.call(<span class="string">'pu'</span>, q)</span><br><span class="line">    <span class="keyword">return</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">translate_google</span><span class="params">()</span>:</span></span><br><span class="line">    q = input(<span class="string">"请输入你要翻译的内容："</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"referer"</span>: <span class="string">"https://translate.google.cn/"</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">"https://translate.google.cn/translate_a/single?client=webapp&amp;sl=en&amp;tl=zh-CN&amp;hl=zh-CN&amp;dt=at&amp;dt=bd&amp;dt=ex&amp;dt=ld&amp;dt=md&amp;dt=qca&amp;dt=rw&amp;dt=rm&amp;dt=sos&amp;dt=ss&amp;dt=t&amp;otf=2&amp;ssel=0&amp;tsel=0&amp;kc=3&amp;tk="</span> + get_tk(</span><br><span class="line">        q) + <span class="string">"&amp;q="</span> + q</span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    data = res.content.decode()</span><br><span class="line">    json_data = json.loads(data)</span><br><span class="line">    print(json_data[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    translate_google()</span><br></pre></td></tr></table></figure><ul><li>tk.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tkk = '441865.2154418832';</span></span><br><span class="line"><span class="keyword">var</span> nu = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; b.length - <span class="number">2</span>; c += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = b.charAt(c + <span class="number">2</span>);</span><br><span class="line">        d = <span class="string">"a"</span> &lt;= d ? d.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : <span class="built_in">Number</span>(d);</span><br><span class="line">        d = <span class="string">"+"</span> == b.charAt(c + <span class="number">1</span>) ? a &gt;&gt;&gt; d : a &lt;&lt; d;</span><br><span class="line">        a = <span class="string">"+"</span> == b.charAt(c) ? a + d &amp; <span class="number">4294967295</span> : a ^ d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">pu = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    tkk=<span class="string">'441865.2154418832'</span>;</span><br><span class="line">    <span class="keyword">var</span> d = tkk.split(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">Number</span>(d[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = [], f = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.length; g++) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = a.charCodeAt(g);</span><br><span class="line">        <span class="number">128</span> &gt; h ? e[f++] = h :</span><br><span class="line">            (<span class="number">2048</span> &gt; h ? e[f++] = h &gt;&gt; <span class="number">6</span> | <span class="number">192</span> :</span><br><span class="line">                    (<span class="number">55296</span> == (h &amp; <span class="number">64512</span>) &amp;&amp; g + <span class="number">1</span> &lt; a.length &amp;&amp; <span class="number">56320</span> == (a.charCodeAt(g + <span class="number">1</span>) &amp; <span class="number">64512</span>) ? (h = <span class="number">65536</span> + ((h &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>) + (a.charCodeAt(++g) &amp; <span class="number">1023</span>), e[f++] = h &gt;&gt; <span class="number">18</span> | <span class="number">240</span>, e[f++] = h &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) :</span><br><span class="line">                        e[f++] = h &gt;&gt; <span class="number">12</span> | <span class="number">224</span>, e[f++] = h &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>), e[f++] = h &amp; <span class="number">63</span> | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; e.length; f++)</span><br><span class="line">        a += e[f],</span><br><span class="line">        a = nu(a, <span class="string">"+-a^+6"</span>);</span><br><span class="line">    a = nu(a, <span class="string">"+-3^+b+-f"</span>);</span><br><span class="line">    a ^= <span class="built_in">Number</span>(d[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="number">2147483647</span>) + <span class="number">2147483648</span>);</span><br><span class="line">    a %= <span class="number">1E6</span>;</span><br><span class="line">    <span class="keyword">return</span> (a.toString() + <span class="string">"."</span> + (a ^ b))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200529150718.png" alt=""></p><h3 id="二、总结常见算法的加密原理"><a href="#二、总结常见算法的加密原理" class="headerlink" title="二、总结常见算法的加密原理"></a>二、总结常见算法的加密原理</h3><ul><li>散列(hash)函数算法：MD5、SHA</li><li>对称加密算法：DES、3DES、AES</li><li>非对称性加密算法：RSA、DSA、ECC<h4 id="散列-hash-函数算法"><a href="#散列-hash-函数算法" class="headerlink" title="散列(hash)函数算法"></a>散列(hash)函数算法</h4></li><li>简介</li></ul><p>Hash也称散列、哈希，对应的英文都是Hash。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。这个映射的规则就是对应的Hash算法，而原始数据映射后的二进制串就是哈希值。活动开发中经常使用的MD5和SHA都是历史悠久的Hash算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo md5(&quot;这是一个测试文案&quot;);&#x2F;&#x2F; 输出结果：2124968af757ed51e71e6abeac04f98d</span><br></pre></td></tr></table></figure><ul><li>特点</li></ul><p>一、不可逆，与原视数据没有对应关系<br>二、输入数据的微小变化会得到完全不同的hash值，相同的数据会得到相同的值<br>三、hash算法冲突概率比较小，但是根据抽屉原理，一定会存在不同的输入被映射成相同输出的情况</p><h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><ul><li>简介</li></ul><p>秘钥：加密解密使用同一个密钥、数据的机密性双向保证、加密效率高、适合加密于大数据大文件、加密强度不高(相对于非对称加密)</p><h4 id="非对称性加密算法"><a href="#非对称性加密算法" class="headerlink" title="非对称性加密算法"></a>非对称性加密算法</h4><ul><li>简介</li></ul><p>秘钥：加密解密使用的不同秘钥、有两个密钥、需要使用密钥生成算法生成两个秘钥、数据的机密性只能单向加密、如果想解决这个问题、双向都需要各自有一对秘钥、加密效率低、加密强度高</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、逆向谷歌翻译&quot;&gt;&lt;a href=&quot;#一、逆向谷歌翻译&quot; class=&quot;headerlink&quot; title=&quot;一、逆向谷歌翻译&quot;&gt;&lt;/a&gt;一、逆向谷歌翻译&lt;/h3&gt;&lt;h4 id=&quot;分析过程&quot;&gt;&lt;a href=&quot;#分析过程&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="JS逆向" scheme="http://yoursite.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
      <category term="JS逆向系列" scheme="http://yoursite.com/tags/JS%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>JS逆向系列一</title>
    <link href="http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B8%80/"/>
    <id>http://yoursite.com/2020/06/17/JS%E9%80%86%E5%90%91%E4%B8%80/</id>
    <published>2020-06-17T10:16:58.000Z</published>
    <updated>2020-06-17T10:30:14.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="谷歌学术镜像"><a href="#谷歌学术镜像" class="headerlink" title="谷歌学术镜像"></a>谷歌学术镜像</h3><p>目标网址：<a href="https://ac.scmor.com/" target="_blank" rel="noopener">https://ac.scmor.com/</a></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531174729.png" alt=""></p><p>目的是爬取学术镜像的真实地址，在Elements视图下，观察<code>现在访问</code>a标签，发现启用了onclick事件，调用了<code>visit()</code>函数，函数内的内容，猜测就是加密后的真实URL地址。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531174922.png" alt=""></p><p>全局搜索<code>visit</code>,在 <a href="https://ac.scmor.com/res/?f=run&amp;v=1590682984" target="_blank" rel="noopener">https://ac.scmor.com/res/?f=run&amp;v=1590682984</a> 中，找到了<code>visit</code>函数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531175244.png" alt=""></p><p>经过观察，猜测<code>strdecode</code>是解密函数，就在上几行的位置，有个可疑参数<code>autour[b]</code>，猜测是URL地址，在Console中测试一下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531180634.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531180730.png" alt=""></p><p>经测试，<code>autour</code>是个数组，里面存放了加密后的真实地址，<code>strdecode</code>也的确是解密函数，现在去拉取<code>strdecode</code>函数具体内容<br>全局搜索，找到了<code>strdecode</code>，经过初步观察，是Base64加密，然后缺啥补啥，将加密函数完整的提取出来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531181249.png" alt=""></p><p>到此，加密函数也有了，现在需要收集全部的URL，于是，之前的<code>autour</code>数组，也拉下来，现在只需要遍历一下就好了，刚好有个<code>run</code>函数就是For循环遍历<code>autour</code>数组，也拿下来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531181940.png" alt=""></p><p>稍微修改下细节，就大功告成，效果图如下：</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200531182151.png" alt=""></p><h3 id="DNS-COM"><a href="#DNS-COM" class="headerlink" title="DNS.COM"></a>DNS.COM</h3><p>目标网址：<a href="https://www.dns.com/login.html" target="_blank" rel="noopener">https://www.dns.com/login.html</a></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601011619.png" alt=""></p><p>随便输入帐号密码进行测试，发现有个XHR请求，里面的<code>password</code>，<code>email</code>两个请求参数都做了加密，猜测这就是刚才输入的帐号密码</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601011947.png" alt=""></p><p>全局搜索 <code>password</code>,通过在后面加上 : 或者 = 可以缩小范围，排除多余项，找到了<code>password:</code>的位置，现在其实已经很明显是AES加密了，但还是测试一下吧</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601012327.png" alt=""></p><p>打断点，重新登陆，果然进入debugger状态了。</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601012821.png" alt=""></p><p>然后在console中测试下<code>aes()</code>函数以及它的参数到底是什么，经验证，发现<code>aes()</code>正是一个加密函数，加密后的内容和一开始看到的相吻合</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601013000.png" alt=""></p><p>现在查看<code>aes</code>函数具体的内容，发现了又有<code>k</code>和<code>iv</code>，并且有个CryptoJS对象</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601095717.png" alt=""></p><p>全局搜索CryptoJS，发现了<code>crypto-js.js</code>文件，明显这是CryptoJS加密库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601100429.png" alt=""></p><p>并且发现还用了<code>$(selector).action()</code>的jQuery语法，所以还需要载入jQuery库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601112445.png" alt=""></p><p>从网上下载单独的CryptoJS库文件引入，从 网页中获取jQuery链接，并载入 jQuery，然后将<code>aes</code>函数也拉下来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601113127.png" alt=""></p><p>效果图如下：</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601113229.png" alt=""></p><h3 id="贝贝网"><a href="#贝贝网" class="headerlink" title="贝贝网"></a>贝贝网</h3><p>目标网址：<a href="https://m.beibei.com/login/login.html" target="_blank" rel="noopener">https://m.beibei.com/login/login.html</a> （需手机端）</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601154549.png" alt=""></p><p>输入帐号密码及验证码进行测试，发现一个XHR请求，类型为POST，提交的表单数据中的用户名密码都为明文，但问题在于请求参数中的<code>_abr_</code>一直在变化，猜测它为加密参数</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601155448.png" alt=""></p><p>全局搜索<code>_abr_</code>无果，只能打请求断点，成功断住</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601160354.png" alt=""></p><p>但是发现断点的位置没有我们要的内容，于是在call Stack中往下找调用栈，call Stack内的方法调用栈的规则是从上到下由最新调用处依次往下排列。在<code>e.ajax</code>中发现了包含有<code>_abr_</code>的内容，但是这里是要发送出去了，没有它的产生过程，于是继续往下找，终于找到了<code>_abr_=</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601163002.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601163301.png" alt=""></p><p>记录<code>_abr_</code>的值为：”013e01885f35c08258b6ce21d500874ed5bb3143a05ed4b7b1”<br>发现<code>_abr_</code>其实是由<code>m(e.type, e.uri.pathname, e.query, e.form)</code>函数生成，于是为了了解它的生成过程，在函数前打上断点，重新发送登陆请求</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601165214.png" alt=""></p><p>单步跟踪，发现了关键函数<code>MD5</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601165852.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601170350.png" alt=""></p><p>继续单步跟踪，又发现了一个关键函数<code>HMAC</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171039.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171405.png" alt=""></p><p>网上查找资料了解这个加密算法，发现HMAC算法，需要一个信息摘要算法以及一个密钥，在下方又找到关键函数<code>HmacSHA1</code>，于是推测使用了SHA-1算法</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601171755.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601185857.png" alt=""></p><p>经过长时间的单步跟踪，总算来到了一开始的函数返回值部分</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601174129.png" alt=""></p><p>现在，我们开始分析，HMAC算法可以使用Python第三方库实现，先尝试一下。加密内容有了，密钥也有了（加密目标值可以用<code>JSON.stringify()</code>提取）<br>加密目标值：”01\nPOST\nb7da15fd7cdc2b8c73958ee82e7424aa\n/mroute.html?method=beibei.user.token.get\n1591002077”<br>密钥：”ytU7vwqIx2UXQNsi”</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601190441.png" alt=""></p><p>Python测试效果如下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191001.png" alt=""></p><p>但是发现，与<code>_abr</code>的值相较，少了一些内容，回过头观察，发现<code>_abr</code>的值由<code>a+m+h</code>组成，<code>a</code>经测试是固定值<code>01</code>，<code>m</code>就是经过HMAC加密后的值，<code>h</code>会变动且暂时还不清楚</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191307.png" alt=""></p><p>对<code>h</code>进行分析，发现是由<code>s</code>的值使用<code>toString(16)</code>函数变化而来，而<code>s</code>则是时间戳(<code>new Date</code>)变化而来</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601191707.png" alt=""></p><p>提取出<code>h</code>的算法，测试了一下，成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601194144.png" alt=""></p><p>接下来，只剩下需要加密的值，它如何产生的，观察发现由<code>a + &quot;\n&quot; + e + &quot;\n&quot; + f + &quot;\n&quot; + p + &quot;\n&quot; + s</code>组成，<code>a</code>、<code>s</code>都清楚了，<code>e</code>发现是<code>POST</code>，<code>p</code>是路径<code>/mroute.html?method=beibei.h5.login</code>，这两个也是固定值，只剩下<code>f</code>是MD5加密后的值，逆向<code>f</code>的产生过程，发现是由”用户名+路径+登陆id”产生而来，如：<code>username=12341234123&amp;scene=h5_login&amp;rams_device_id=2654748010</code><br>所以现在只需要将这个值MD5加密后传入即可，同样也能用Python实现</p><p>最终完成的效果<br><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200601195839.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;谷歌学术镜像&quot;&gt;&lt;a href=&quot;#谷歌学术镜像&quot; class=&quot;headerlink&quot; title=&quot;谷歌学术镜像&quot;&gt;&lt;/a&gt;谷歌学术镜像&lt;/h3&gt;&lt;p&gt;目标网址：&lt;a href=&quot;https://ac.scmor.com/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="JS逆向" scheme="http://yoursite.com/categories/JS%E9%80%86%E5%90%91/"/>
    
    
      <category term="JS逆向系列" scheme="http://yoursite.com/tags/JS%E9%80%86%E5%90%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub渗透之DC-1</title>
    <link href="http://yoursite.com/2020/05/25/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-1/"/>
    <id>http://yoursite.com/2020/05/25/VulnHub%E6%B8%97%E9%80%8F%E4%B9%8BDC-1/</id>
    <published>2020-05-25T04:57:51.000Z</published>
    <updated>2020-05-25T04:58:49.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0×00-说明"><a href="#0×00-说明" class="headerlink" title="0×00 说明"></a>0×00 说明</h2><blockquote><p>kali与目标处于同一网段下<br>攻击机：Kali(VMware ) IP:192.168.1.31</p></blockquote><p>特别说明：每个靶机作者都对靶机做了详细的描述以及攻击目标，比如DC1就需要找到5个flag，最终目标是在root的主目录中找到并读取该标志！</p><p>通过每个flag所获得知识点</p><p>1、msf的熟练使用以及搜索可利用漏洞（Drupal）；</p><p>2、留意目标网站的配置文件（慢慢查看别错过重要信息）；</p><p>3、数据库管理员提权（更新管理员密码或者添加一个新用户）；</p><p>4、suid提权的命令（nmap、vim、find、bash、more、less、nano、cp）。</p><h2 id="0×01-信息收集"><a href="#0×01-信息收集" class="headerlink" title="0×01 信息收集"></a>0×01 信息收集</h2><h3 id="探测目标IP"><a href="#探测目标IP" class="headerlink" title="探测目标IP"></a>探测目标IP</h3><p>namp -sP 192.168.1.0/24<br>arp-scan -l    //扫描当前网段下的IP<br>Cadmus Computer Systems 表示Virtualbox虚拟机<br>分析得出目标IP为192.168.1.30</p><blockquote><p>靶机：DC-1(Virtualbox) IP:192.168.1.30</p></blockquote><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><p>nmap -sV -p- 192.168.1.30    //扫描全端口<br>-sV 用来扫描目标主机和端口上运行的软件的版本<br>-p- 扫描0-65535全部端口</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524190438.png" alt=""></p><p>80端口开放，访问一下</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524191012.png" alt=""></p><p>Wappalyzer进行网站指纹识别，查看到是Drupal 7</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524191337.png" alt=""></p><p>查看一下robots.txt文件已经目录扫描(省略)。。发现没有可利用的地方</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524192628.png" alt=""></p><h2 id="0×02metasploit"><a href="#0×02metasploit" class="headerlink" title="0×02metasploit"></a>0×02metasploit</h2><p>直接上metasploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sf:~# msfconsole</span><br><span class="line">msf &gt; search Drupal</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524201135.png" alt=""></p><p>选择4，drupalgeddon2的exp，设置下rhost，直接exploit，成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524212454.png" alt=""></p><p>接下来使用msf自带的shell</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213300.png" alt=""></p><h3 id="发现flag1"><a href="#发现flag1" class="headerlink" title="发现flag1"></a>发现flag1</h3><p>查看当前路径下的文件，发现<code>flag1.txt</code>文件，查看一下，发现提示CMS配置文件有猫腻</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213406.png" alt=""></p><h3 id="发现flag2"><a href="#发现flag2" class="headerlink" title="发现flag2"></a>发现flag2</h3><p>网上搜索得知，Drupal 7的默认配置文件为<code>sites/default/settings.php</code>，查看发现flag2，还有数据库连接信息</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524213927.png" alt=""></p><h2 id="0×003-弯路"><a href="#0×003-弯路" class="headerlink" title="0×003 弯路"></a>0×003 弯路</h2><p>尝试连接数据库，结果连接失败，应该是权限不足</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214247.png" alt=""></p><h3 id="爆破flag4用户密码"><a href="#爆破flag4用户密码" class="headerlink" title="爆破flag4用户密码"></a>爆破flag4用户密码</h3><p>于是去查看<code>/etc/passwd</code>文件，发现flag4用户</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214358.png" alt=""></p><p>使用hydra尝试爆破flag4用户的密码，<code>hydra -l flag4 -P /usr/share/john/password.lst ssh://192.168.1.30</code></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524214646.png" alt=""></p><p>成功爆破flag4的密码，为 orange ，接下来ssh登录flag4用户，查看当前路径下有<code>flag4.txt</code>，得到新的提示——root目录里有个flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215013.png" alt=""></p><h2 id="0×04-连接数据库"><a href="#0×04-连接数据库" class="headerlink" title="0×04 连接数据库"></a>0×04 连接数据库</h2><p>然后我们连接数据库，这次成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215205.png" alt=""></p><p>顺藤摸瓜，仔细查找数据库</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215355.png" alt=""></p><p>查看user表，发现admin用户</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215445.png" alt=""></p><p>查看role表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215512.png" alt=""></p><p>查看role_permission表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215644.png" alt=""></p><p>查看node表</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524215712.png" alt=""></p><h3 id="发现flag3"><a href="#发现flag3" class="headerlink" title="发现flag3"></a>发现flag3</h3><p>发现flag3，得知uid为1的用户是不受Drupal权限管制的，具有最高权限，uid 1用户也就是admin，</p><h2 id="0×05-两个思路"><a href="#0×05-两个思路" class="headerlink" title="0×05 两个思路"></a>0×05 两个思路</h2><h3 id="一、重置管理员密码"><a href="#一、重置管理员密码" class="headerlink" title="一、重置管理员密码"></a>一、重置管理员密码</h3><p>使用Drupal对数据库的加密方法，加密脚本位置在网站根目录下的script下(msf shell)，使用脚本生成加密密文，然后登陆数据库修改admin的密码</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222511.png" alt=""></p><p>修改密码为123456</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222543.png" alt=""></p><p>成功登陆</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524222616.png" alt=""></p><h3 id="二、添加一个管理员权限的用户"><a href="#二、添加一个管理员权限的用户" class="headerlink" title="二、添加一个管理员权限的用户"></a>二、添加一个管理员权限的用户</h3><p>先查看一下靶机的版本，7.24</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232222.png" alt=""></p><p>msf搜索Druapl 7.24对应可利用的脚本，发现一个符合</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232538.png" alt=""></p><p>运行脚本，进行利用</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524232830.png" alt=""></p><p>增加了一个用户user，密码为123456，尝试登陆网站，发现登陆成功</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524233018.png" alt=""></p><h3 id="发现flag3-1"><a href="#发现flag3-1" class="headerlink" title="发现flag3"></a>发现flag3</h3><p>从网站上找到了flag3的界面，得到提示<code>Special PERMS will help FIND the passwd - but you&#39;ll need to -exec that command to work out how to get what&#39;s in the shadow.</code>，重点在（FIND the passwd、need to -exec that command、in the shadow）</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524223823.png" alt=""></p><p>根据线索，我们又找到了flag4以及它的目录，再根据flag4的提示，（用相同的方法在root目录下）找到最终flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524224339.png" alt=""></p><h2 id="0×06-提权"><a href="#0×06-提权" class="headerlink" title="0×06 提权"></a>0×06 提权</h2><p>于是，想到suid提权，查询具有root权限的命令，以下均可查询：</p><ul><li>find / -user root -perm -4000 -print 2&gt;/dev/null</li><li>find / -perm -u=s -type f 2&gt;/dev/null</li><li>find / -user root -perm -4000 -exec ls -ldb { }<br>注： -type f即文件，-perm -u=s 即user权限位为suid</li></ul><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230257.png" alt=""></p><p>发现<code>find</code>命令本身就是root权限</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230453.png" alt=""></p><p>于是就用<code>find</code>提权，<code>find ./ aaa -exec &#39;/bin/sh&#39; \\;</code> ，或者新建一个文件，验证一下，已经是root了</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524230955.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231608.png" alt=""></p><h3 id="最终flag"><a href="#最终flag" class="headerlink" title="最终flag"></a>最终flag</h3><p>接着找到根目录下的root目录，里面就是最终的flag</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231307.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524231720.png" alt=""></p><h2 id="0×07-总结"><a href="#0×07-总结" class="headerlink" title="0×07 总结"></a>0×07 总结</h2><p>DC-1找到最终的flag并不难，难在找齐五个flag，第一次实验，很生疏，存在很多问题：</p><ul><li><p>metasploit 熟练度不足，且exploit模块成功后的shell不是交互性，DC-1安装了python环境，可以通过pty.spawn()获得交互性shell</p><p><img src="https://raw.githubusercontent.com/Dsysf/images/master/img/20200524235827.png" alt=""></p></li><li><p>exploitdb熟练度也不足</p></li><li><p>Linux熟练度不足，find命令，有待学习</p></li><li><p>suid提权的命令（nmap、vim、find、bash、more、less、nano、cp），有待学习</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0×00-说明&quot;&gt;&lt;a href=&quot;#0×00-说明&quot; class=&quot;headerlink&quot; title=&quot;0×00 说明&quot;&gt;&lt;/a&gt;0×00 说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;kali与目标处于同一网段下&lt;br&gt;攻击机：Kali(VMware ) I
      
    
    </summary>
    
    
      <category term="渗透" scheme="http://yoursite.com/categories/%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="VulnHub" scheme="http://yoursite.com/tags/VulnHub/"/>
    
  </entry>
  
</feed>
